if time = -1 {
hspeed = 0;
state_type = "attack";
attack_type = "uthrow";
image_speed = 0;
sprite_index = utilt_sprite;
image_index=0;
timer = 0;
time = 45;
timer_speed=1;
target.timer_speed = 0;
target.alarm[0] = 35
}
if timer < time {
   switch (timer) { 
	case 9: image_index = 0; break; 
	case 15: image_index = 1; break; 
	case 17: image_index = 2; break; 
	case 19: image_index = 3; break; 
	case 20: image_index = 4; break; 
	case 22: image_index = 5; break; 
	case 29: image_index = 6; break; 
	case 35: image_index = 7; break; 
	case 40: image_index = 8; break; 
	
	case 100: image_index = 0; break; 
	case 102: image_index = 1; break; 
	case 104: image_index = 2; break; 
	case 106: image_index = 3; break; 
	case 108: image_index = 4; break; 
	case 110: image_index = 5; break; 
	case 112: image_index = 6; break; 
	case 114: image_index = 7; break; 
	case 117: image_index = 8; break; 
	case 120: image_index = 9; break; 
	case 123: image_index = 10; break; 
	case 126: image_index = 11; break; 
	case 129: image_index = 12; break; 
	case 132: image_index = 13; break; 
	case 135: image_index = 14; break; 
	case 139: image_index = 15; break; 
	case 142: image_index = 16; break; 
	case 145: image_index = 17; break; 
	case 148: image_index = 18; break; 
	case 151: image_index = 19; break; 
	case 154: image_index = 20; break; 
	case 157: image_index = 21; break; 
	case 160: image_index = 22; break; 
	case 164: image_index = 23; break; 
	case 167: image_index = 24; break; 

}

switch (timer) { 
	case 24: iciclespike.image_index = 0; break; 
	case 26: iciclespike.image_index = 1; break; 
	case 28: iciclespike.image_index = 2; break; 
	case 30: iciclespike.image_index = 3; break; 
	case 32: iciclespike.image_index = 4; break; 
	case 157: iciclespike.image_index = 5; break; 
	case 177: iciclespike.image_index = 6; break; 
	case 179: iciclespike.image_index = 7; break; 
	case 181: iciclespike.image_index = 8; break; 
}


switch (timer) { 
	case 24: iciclespike2.image_index = 0; break; 
	case 26: iciclespike2.image_index = 1; break; 
	case 28: iciclespike2.image_index = 2; break; 
	case 30: iciclespike2.image_index = 3; break; 
	case 32: iciclespike2.image_index = 4; break; 
	case 157: iciclespike2.image_index = 5; break; 
	case 177: iciclespike2.image_index = 6; break; 
	case 179: iciclespike2.image_index = 7; break; 
	case 181: iciclespike2.image_index = 8; break; 
}

if timer = 19 {
	create_hitbox ( 5 , angle_correct(60) , 7 , 0.1 , 20 , 11 , bbslash3 , obj_spark_slash3 , 1.85 , 1.58 , 11.70 , 34.20 , self.id , 1 , 3 );
	sound_play(swingsnd3);
	duster = instance_create(x-(3-facing*6)*size,y,obj_dust_effect)
                duster.facing = facing
                duster.image_xscale = 0.3
                duster.image_yscale = 0.3
				hitbox.weight_kb = 1
				hitbox.di = 0
}

if timer = 24 {
	iciclespike = create_spark(35,5,self.id);
    iciclespike.sprite_index = iciclespike_sprite;
    iciclespike.image_speed = 0;
    iciclespike.image_alpha = 1;
    iciclespike.image_xscale = 0.4 * (1-facing*2);
    iciclespike.image_yscale = 0.4;
    iciclespike.depth = depth - 0.1;
    iciclespike.snap = self.id
	sound_play(icecreate_sound);
	iciclespike2 = create_spark(70,5,self.id);
    iciclespike2.sprite_index = iciclespike_sprite;
    iciclespike2.image_speed = 0;
    iciclespike2.image_alpha = 1;
    iciclespike2.image_xscale = -0.4 * (1-facing*2);
    iciclespike2.image_yscale = 0.4;
    iciclespike2.depth = depth - 0.1;
    iciclespike2.snap = self.id
}

if timer = 30 {
	create_projectile(2, 90, 6, 4, 200, 15, bbslash4, obj_spark_ice2, 1, 1, 15, 30, self.id, 20, -1);
		proj.x = target.x;
        proj.y=target.y-(target.actual_height / 2 );
		proj.image_alpha = 0
		proj.di = 0
		icecube = create_projectile(2, 90, 0, 0, 200, 1, bbslash3, obj_spark_ice2, 0.2, 0.2, 15, 30, self.id, 1000, char_custom1);
		icecube.hit = 2
		icecube.x = target.x;
        icecube.y=target.y-(target.actual_height / 2 );
		icecube.image_xscale = target.size / 2.2
		icecube.image_yscale = target.size / 2.2
				screen_shake(6,3);
		
}

if timer >= 30 and timer <= 177 {
	target.sprite_index = target.flinch_sprite;
		target.state_type = "flinch"
target.depth = depth + 1;
target.speed = 0;
target.gravity_lock = 1;
target.air_move = 0
	}

if timer = 35 {
	sound_play(sheath_sound);
}

if timer = 43 {
	timer = 100
	time = 200
	sprite_index = uthrow_sprite
	image_index = 0
	sound_play(choose(uthrow_voice,uthrow_voice2))
}

if timer = 112 {
	icearrow = create_projectile(0.2, angle_correct(45), 2, 0, 200, 2, bbslash3, obj_spark_ice2, 0.5, 0.5, 15, 30, self.id, 200, char_custom6);
	icearrow.hit = 2
	icearrow.di = 0
	icearrow.depth = depth +3
	sound_play(icecreate_sound);
}

if timer = 177 {
	/*
	create_projectile(2, angle_correct(75), 7.3, 5.3, 200, 15, bbslash4, obj_spark_ice2, 1, 1, 15, 30, self.id, 20, -1);
		proj.x = target.x;
        proj.y=target.y-(target.actual_height / 2 );
		proj.image_alpha = 0
		*/
		icecube.breakup = 1
}

if timer = 147 {
	icearrow.shoot = 1
	sound_play(fthrow_sound);
}

if timer = 183 {
	with(iciclespike) {instance_destroy()}
	with(iciclespike2) {instance_destroy()}
}
	  
	
}

if timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" {
    attack_type = "none";
    state_type = "stand";
    timer = 0;
    time =-1;
}
        
