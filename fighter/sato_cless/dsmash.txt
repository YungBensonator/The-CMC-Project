if state_type = "stand" || state_type = "run" {
        hspeed = 0;
        state_type = "attack";
        attack_type = "dsmash";
        image_speed = 0;
        sprite_index = dsmash_sprite;
        image_index=0;
        timer = 0;
        time = 75;
	    charge_frame = 2;
}
if ( timer < time )
  {
    switch ( timer )
      {
    case 4: image_index = 1; break;
    case 6: image_index = 2; break;
    case 8: image_index = 3; break;
    case 10: image_index = 4; break;
    case 13: image_index = 5; break;
    case 16: image_index = 6; break;
    case 20: image_index = 7; break;
	case 24: image_index = 8; break;
      }
	if timer = 6 {
	    sound_play(dsmash_voice);
	    sound_play(swingsnd1);
	}
	
	if timer = 18{
		create_hitbox(12,45+facing*90,6.0,7.5,19,7,slash3,obj_spark_slash2,1.0,1.0,30,20,self.id,18,3);
		}
		
		
	if timer = 9{
	beasteff = create_blur(x,y,self.id);
		beasteff.sprite_index = dsmash_effect_sprite;
        beasteff.image_xscale = (size)*(0.1-facing*0.2);
        beasteff.image_yscale = (size) * 0.1;
        beasteff.x = x;
        beasteff.y = y;
        beasteff.image_speed = 0;
        beasteff.image_index = 0;
        //beasteff.alarm[0] = 30;
        beasteff.snap = self.id
        beasteff.depth = depth - 0.1;
		beasteff.image_alpha=0.70
	}
	
	if timer = 12{
	    beasteff.image_xscale = (size)*(0.2-facing*0.4);
        beasteff.image_yscale = (size) * 0.2;
	}
	if timer = 15{
	    beasteff.image_xscale = (size)*(0.3-facing*0.6);
        beasteff.image_yscale = (size) * 0.3;
	}
	if timer = 18{
	    beasteff.image_xscale = (size)*(0.4-facing*0.8);
        beasteff.image_yscale = (size) * 0.4;
	}
	if timer = 21{
	    beasteff.image_xscale = (size)*(0.5-facing*1.0);
        beasteff.image_yscale = (size) * 0.5;
		
		hitbox.bkb = 5;
	    hitbox.kbg = 6.5;
		hitbox.image_xscale = 1.1
		hitbox.image_yscale = 1.1
	}
	/*
	if timer = 24{
	    beasteff.image_xscale = (size)*(0.6-facing*1.2);
        beasteff.image_yscale = (size) * 0.6;
	}
	*/
	if timer = 24{
	    beasteff.image_xscale = (size)*(0.7-facing*1.4);
        beasteff.image_yscale = (size) * 0.7;
		
		hitbox.bkb = 4;
	    hitbox.kbg = 4.5;
		hitbox.image_xscale = 1.2
		hitbox.image_yscale = 1.2
	}
	
	if timer = 27{
	    beasteff.image_xscale = (size)*(0.8-facing*1.6);
        beasteff.image_yscale = (size) * 0.8;
		
		hitbox.bkb = 3;
	    hitbox.kbg = 3.5;
		hitbox.image_xscale = 1.3
		hitbox.image_yscale = 1.3
	}
	
	if timer = 30{
	    beasteff.image_xscale = (size)*(0.9-facing*1.8);
        beasteff.image_yscale = (size) * 0.9;
		
		hitbox.bkb = 2;
	    hitbox.kbg = 2.5;
		hitbox.image_xscale = 1.4
		hitbox.image_yscale = 1.4
	}
	
	if timer = 33{
	    beasteff.image_xscale = (size)*(1.0-facing*2.0);
        beasteff.image_yscale = (size) * 1.0;
		beasteff.image_alpha=0.50
		
		hitbox.bkb = 1;
	    hitbox.kbg = 1.5;
		hitbox.image_xscale = 1.5
		hitbox.image_yscale = 1.5
	}
	
	if timer = 36{
	    beasteff.image_xscale = (size)*(1.2-facing*2.4);
        beasteff.image_yscale = (size) * 1.2;
		beasteff.image_alpha=0.30
	}
	if timer = 39{
	    beasteff.image_xscale = (size)*(1.5-facing*3.0);
        beasteff.image_yscale = (size) * 1.5;
		beasteff.image_alpha=0.10
	}
	if timer = 40{
	if instance_exists(beasteff){
	with (beasteff){instance_destroy()}
	}
	}
	
	
}
if timer >= 40 && state_type != "flinch" && state_type != "air_flinch" {
    attack_type = "none";
    if air > 0
        state_type = "jump";
    else
        state_type = "stand";
    timer = 0;
    time =-1;
    }