if ( time == -1 )
  {
  hspeed = 0;
  state_type = "attack";
  attack_type = "bthrow";
  image_speed = 0.25;
  sprite_index = bthrow_sprite;
  image_index = 0;
  timer = 0;
  time = 28;
  timer_speed = 1;
  target.timer_speed = 0;
  target.alarm[0] = 50;
  }
  
if ( timer = 0 )
{
target.x = x + 25 * size * (1-facing*2);
target.y = y;
}
  
switch ( timer )
  {
  case 1:
    target . x = x + 20 * (1-facing*2) * size;
    target . y = y - 1 * size;
    break;
  case 2:
    target . x = x + 20 * (1-facing*2) * size;
    target . y = y - 2 * size;
	break;
  case 3:
    target . x = x + 15 * (1-facing*2) * size;
    target . y = y - 3 * size;
	break;
  case 4:
    target . x = x + 10 * (1-facing*2) * size;
    target . y = y - 4 * size;
	break;
  case 5:
    target . x = x + 6 * (1-facing*2) * size;
    target . y = y - 9 * size;
    break;
  case 6:
    target . x = x + 2 * (1-facing*2) * size;
    target . y = y - 14 * size;
    break;
  case 7:
    target . x = x - 2 * (1-facing*2) * size;
    target . y = y - 19 * size;
    break;
  case 8:
    target . x = x - 6 * (1-facing*2) * size;
    target . y = y - 24 * size;
    break;
  case 9: case 11: case 12:
    target . x = x - 9 * ( 1-facing-facing );
    target . y = y - 24 * size;
    break;
  case 10:
    target . x = x - 12 * ( 1-facing-facing );
    target . y = y - 24 * size;
    break;
  case 11:
    target . x = x - 15 * ( 1-facing-facing );
    target . y = y - 24 * size;
    break;
  case 12: case 13: case 14: case 15:
    target . x = x - 18 * ( 1-facing-facing );
    target . y = y - 24 * size;
    break;
  case 16:
    target . x = x - 18 * ( 1-facing-facing );
    target . y = y - 24 * size;
    create_throw_box ( 7 , angle_correct(150) , 5.5 , 5.2 , 6 , 1 , -1 , -1 , 0.8 , 0.8 , -25 , 40 , self.id , 1 );
    hitbox.hit_stun = 10;
    break;
  }
if ( timer = 4) {
sound_play(vine_sound3);
}

 if (timer >= 16){
if (attack_success || target.object_index == obj_enemy) && (obj_score_control.stocks[target.number-1] == 1 && dontrepeat = 0){
				if ((target.weight <= .22 && target.percent > 130) || (target.weight > .22 && target.weight < .3 && target.percent > 145) || (target.weight > .3 && target.percent > 160)){
			        killspark = instance_create(target.x-200,target.y-170,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.65;
				killspark.image_yscale = size * 0.85;
	            killspark.image_xscale = size * 0.45;
				killspark.image_yscale = size * 0.65;
                killspark.image_xscale = size * 0.65;

				killspark.image_index = 0;
				killspark.image_speed = 0.045;
				killspark.alarm[0] = 80;
				killspark.depth = depth + 1;
				sound_play(killscreen_voice);
				screen_shake(30,30);
				freezer  = instance_create(target.x,target.y,obj_freeze)
				freezer2  = instance_create(x,y,obj_freeze)
				effect_create_above(ef_ellipse,target.x,target.y+10,1,c_black)
				freezer.alarm[0] = 78
				freezer2.alarm[0] = 80
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = target.x - 50;
				spark.camera_r = target.x + 50;
				spark.camera_u = target.y - 80;
				spark.camera_d = target.y;
				spark.camera_boundary_zoom = 20;
				spark.alarm[0] = 60;
				spark2 = instance_create(target.x+8*(1-facing*2),target.y-26,obj_spark_hit3)
				spark2.alarm[0] = 50
				dontrepeat = 1;
				}
				}
        
  }	  


if ( timer >= 28 )
  {
  dontrepeat = 0;
  attack_type = "none";
  state_type = "stand";
  timer = 0;
  time = -1;
  }