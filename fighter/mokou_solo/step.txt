/////////////////Meter Start/////////////////////////////////////
if (!instance_exists(MeterHud)){
    hud_x = obj_game_control.hud_x[other.number-1];
    hud_y = window_h-128+lengthdir_y(obj_game_control.hudp_shake[i]*0.8,obj_game_control.hudp_shake[i]*60);    
    MeterHud = instance_create ( hud_x, hud_y, obj_custom_gfx);
	MeterHud.draw_script = hudThing_draw_script;
    MeterHud.step_script = hudThing_step_script;
    MeterHud.owner = self.id;
    MeterHud.keepmain = self.keepmain;
	MeterHud.lifemeter = 200
	MeterHud.depth = -100
	MeterHud.notstart = 0
	MeterHud.image_speed = 0
}
MeterHud.sprite_index = meter_sprite;
if(floattime = maxfloattime){MeterHud.image_index = 55;} else {MeterHud.image_index = floattime*56/maxfloattime;}
MeterHud.image_speed = 0;
//MeterHud.image_index = meter;
//MeterHud.image_speed = 0;
MeterHud.lifemeter = lifemeter
/////////////////Meter Stop/////////////////////////////////////

///Self Damage Scaling - For physical attacks
if attack_type = "downb"
	selfdmg = 0.25;
else if attack_type = "jab" || attack_type = "nair" || attack_type = "hold" 
	selfdmg = 1;
else if attack_type = "stilt" || attack_type = "utilt" || attack_type = "dtilt" || attack_type = "uair" || attack_type = "dthrow"
	selfdmg = 2;
else if attack_type = "dair" || attack_type = "fair" || attack_type = "bair" || attack_type = "sideb" || attack_type = "uthrow" || attack_type = "dash_attack"
	selfdmg = 3;
else if attack_type = "usmash" || attack_type = "dsmash"
	selfdmg = 4;
else if attack_type = "ssmash"
	selfdmg = 5;
else
	selfdmg = 0;

///Meter Gain - Affects Life Meter, Spell Meter, and Spell Regen Cooldown
if lifemeter < 0
	lifemeter = 0;
if lifemeter > maxlifemeter
	lifemeter = maxlifemeter;
	
if floattime < 0 || nospellmode > 0
	floattime = 0;
if floattime > maxfloattime
	floattime = maxfloattime;
	
if spellcosttimer > 0
	spellcosttimer -= 1;
if spellcosttimer < 0 || ( hitbox.hit = 1 || hitbox2.hit = 1 || hitbox3.hit = 1 || hitbox4.hit = 1 )
	spellcosttimer = 0;
	
if floattime < spellcost
{
	nobullet = 1;
	
	if frac((timer-4)/10) = 0 
	image_blend = c_white
	if frac((timer)/10) = 0 
	{
		image_blend = c_red
		flashing = true
		alarm[7] = 3;
	}
}
else
{
	nobullet = 0;
}

///Spell Meter Gain - Regen and gain on hit
if floattime < maxfloattime && spellcosttimer <= 0 && nospellmode <= 0 && state_type != "broken" && state_type != "grabbed" && state_type != "out" && state_type != "dead"
{
	if ( state_type = "attack" || state_type = "air_attack" ) && ( hitbox.hit = 1 || hitbox2.hit = 1 || hitbox3.hit = 1 || hitbox4.hit = 1 )
	{
		if attack_type = "ssmash"
			floattime += spellgain * 1.25
		if attack_type = "dsmash"
			floattime += spellgain * 0.05
		if attack_type = "nair"
			floattime += spellgain * 0.5
		else
			floattime += spellgain;
	}
	else
		floattime += spellregen + (attack_type = "final_smash")*2;
}

///Rage Bonus - For non-self damage
if blueflame <= 0 && resurrection <= 0 && selfdmg <= 0
{
	var obj;
	if ( place_meeting ( x , y , attack_box ) )
	{
		obj = instance_nearest ( x , y , attack_box)
	}
	if (place_meeting ( x , y , projectile_box))
	{
		obj = instance_nearest (x,y,projectile_box)
	}
	
	ragebonustimer -= 1
	ragebonus = ((percent - lastpercent) * 0.9) + ( obj.damage * (obj.dir = 361) )
	if ragebonustimer < 0
	{
		if percent != lastpercent
			ragebonustimer = 1
	}
}
if ragebonustimer = 0 
{
	lifemeter += ragebonus
	lastpercent = percent
}
if selfdmg > 0
{
	lastpercent = percent
}

///Super Input - For Blueflame Card
if ( attacking = 1 && special = 1 ) { super = 1;}
else {super = 0;}

///Resurrection - For self heal after successfully landing Neutral B. Life Recovered = Life Meter.
if resurrection = 1
{
	if lifemeter > 0
	{
		percent -= 1;
		lifemeter -= 1;
	}
	if lifemeter <= 0
	{
		resurrection = 0;
	}
}

///Blue Flame - Uses Life Meter to boost attack power. Causes self damage overtime.
if blueflame > 0
{	
	if blueflame = 1
	{
		blueflamepower = lifemeter //(cardLv = 1)*0.1 + (cardLv = 2)*0.3 + (cardLv = 3)*0.6  + (cardLv = 4)
		blueflametimer = 60 * 30
		blueflame += 1
	}
	
	if blueflame = 2
	{
		if blueflametimer > 0
		{
			percent += 2/60;
			blueflametimer -= 1;
			//lifemeter = 0;
			offense = 1 + blueflamepower/200;
			lifemetergain = 0;
			after_image(3,c_aqua,0.5);
			
			if ( state_type = "attack" || state_type = "air_attack" ) 
			{
				hitbox.armor_break = 1
				hitbox2.armor_break = 1
				hitbox3.armor_break = 1
				hitbox4.armor_break = 1
			}
		}
		else
		{
			blueflame += 1
		}
	}
	
	if blueflame = 3
	{
		lifemeter = 0;
		blueflame = 0;
	}
}

if blueflame < 1
{
	blueflamepower = 0;
	blueflametimer = 0;
	offense = 1;
	lifemetergain = 0.9
	
	if ( state_type = "attack" || state_type = "air_attack" ) 
	{
		hitbox.armor_break = 0
		hitbox2.armor_break = 0
		hitbox3.armor_break = 0
		hitbox4.armor_break = 0
	}
}

///Meter Reset - Happens when dying
if state_type = "out" || state_type = "dead"
{
	lifemeter = 0;
	blueflame = 0;
	sidebtemp = 0;
	upbtemp = 0;
	upbflytemp = 0;
	downbtemp = 0;
}

///Spellbreak - Cancels out bullet attacks
if ( state_type = "flinch" && grabtimer <= 0 ) || state_type = "air_flinch" || state_type = "grabbed" || state_type = "tumble" || state_type = "broken" || state_type = "out" || state_type = "dead"
	spellbreak = 1;
else
	spellbreak = 0;
	
/// Special Cooldown Reset
if air = 0
{
	sidebtemp = 0;
	upbtemp = 0;
	upbflytemp = 0;
}

if attack_type != "upb"
{
	upbfly = 0;
}

/*
///Last Word - Phoenix Rebirth
if lastword
{
	super_armor = 9999;
	heavy_armor = 9999;
	hyper_armor = 9999;
	weight = 9999;
	intangible = 0;
	upbtemp = 0;
	upbfly = 1;
	upbflytemp = 1;
	lastwordtemp = 1;
	//smash_power = 0;
	
	if !state_type = "out" && !state_type = "dead" && percent < 100
	{
		if state_type != "air_attack" && attack_type != "zair" 
		{
			intangible = 0;
			upbtemp = 0;
			upbfly = 1;
			upbflytemp = 1;
			lastword = 1;
			timer = 0;
			time = -1;
			state_type = "jump";
			char_zair();
		}
		if image_angle != 0 {image_angle = 0}
		if spellbreak != 0 {spellbreak = 0}
		if state_type = "flinch" || state_type = "air_flinch" {hspeed = 0; vspeed = 0;}
	}
	
	if state_type = "out" || state_type = "dead"
	{
		spellbreak = 1;
	}
}


/*
if ( percent >= 100 || (state_type = "dead") || ( state_type = "ded" ) ) && lastwordtemp >= 1
{
	state_type = "ded";
	dead = 1;
	dead_timer = 111;
	lastword = 0;
}


if lastwordtimer = 1800
{
	timer = time;
	lastword = 0;
	lastwordtimer = 0;
}

if !lastword
{
	lastwordtemp = 0;
	super_armor = 0;
	heavy_armor = 0;
	hyper_armor = 0;
	weight = default_weight;
}
*/

///Bug Fix - Dtilt had a ( feels like random ) chance of spawning a projectile when jump canceled. This hopefully removes that.
if dtilttimer > 0 {dtilttimer -= 1;}
if dtilttimer <= 0 {dtilttimer = 0;}

//Flip Cancel Timer
if flipcanceltimer > 0
	flipcanceltimer -= 1;
if flipcanceltimer < 0
	flipcanceltimer = 0;
	
//Grab Flinch Timer
if grabtimer > 0
	grabtimer -= 1;
if grabtimer < 0
	grabtimer = 0;

//Crouch Animation Fix
if ( sprite_index == crouch_sprite ) || ( state_type = "crouch" )
{
	sprite_index = crouch_sprite;
	image_speed = 0;
	
	switch ( timer )
	{
		case 0:  image_index = 0; crouchgetuptimer = 10; break;
		case 3:  image_index = 1; break;
		case 6:  image_index = 2; break;
		case 9:  image_index = 3; break;
		case 12: image_index = 4; break;
	}
}

if (enemy.state_type = "respawn") {
	temp_spawn += 1
}

if ( state_type = "stand" && crouchgetuptimer > 0 )
{
	sprite_index = land_sprite;
	image_speed = 0;
	crouchtemp = 1;
	crouchgetuptimer -= 1;
	
	switch ( crouchgetuptimer )
	{
		case 2:  image_index = 4; break;
		case 4:  image_index = 3; break;
		case 6:  image_index = 2; break;
		case 8:  image_index = 1; break;
		case 10: image_index = 0; break;
	}
}

if ( state_type = "stand" && crouchgetuptimer = 0 && crouchtemp = 1 )
{
	sprite_index = stand_sprite;
	image_index = 0;
	crouchtemp = 0;
}

if ( state_type != "stand" && state_type != "crouch" && crouchgetuptimer > 0 )
{
	crouchgetuptimer = 0;
	crouchtemp = 0;
	firstframetemp = 0;
}

//Stand Animation Fix
if ( sprite_index = stand_sprite )
{
	image_speed = 0.125;
}

//Walk Animation Fix
if ( sprite_index = walk_sprite )
{
	image_speed = 0.125;
}



if (instance_exists(resurrectpillar)){
	killspark = instance_create(target.x-235,target.y-250,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.8;
				killspark.image_yscale = size * 0.8;
				killspark.image_index = 0;
				killspark.image_speed = 0.048;
				killspark.alarm[0] = 90;
				killspark.depth = depth + 1;
				sound_play(killscreen_voice);
				screen_shake(100,100);
				freezer  = instance_create(enemy.x,enemy.y,obj_freeze)
				freezer2  = instance_create(x,y,obj_freeze)
				effect_create_above(ef_ellipse,enemy.x,enemy.y+10,1,c_black)
				freezer.alarm[0] = 90
				freezer2.alarm[0] = 90
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = target.x - 30;
				spark.camera_r = target.x + 30;
				spark.camera_u = target.y - 75;
				spark.camera_d = target.y
				spark.camera_boundary_zoom = 100;
				spark.alarm[0] = 90;
				spark2 = instance_create(enemy.x+8*(1-facing*2),enemy.y-26,obj_spark_hit3)
				spark2.alarm[0] = 90;
}

//Jab Fix
if sprite_index = walk_sprite || sprite_index = stand_sprite || sprite_index = land_sprite || air > 0 || spellbreak > 0
{
	runtemp = 0;
}
if ( sprite_index = run_sprite ) && air = 0
{
	runtemp = 1;
}

//Jump Animation Fix
if ( sprite_index == jump_sprite )
{
	if image_index > loopstart_jump+1
		image_index = loopstart_jump;
}

if ( air = 0 ) { sidebtemp = 0; }

if ( sprite_index == jump_sprite )
{
  if ( timer = 0 )
    image_index = 0;
}

if sprite_index = walk_sprite
  image_speed = 0.2;

if ( state_type = "broken" )
  image_speed = 0.02;
 
 if (enemy.state_type = "respawn" && enemy.air > 0){
	temp_spawn += 0.5
}

if (instance_exists(proj)){
	if ((enemy.state_type = "flinch" || enemy.state_type = "air_flinch") && (dontrepeat = 0 && temp_spawn >= 2) && target.damage > 90){
				dontrepeat = 1;
				killspark = instance_create(enemy.x-235,enemy.y-250,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.8;
				killspark.image_yscale = size * 0.8;
				killspark.image_yscale = size * 0.8;
				killspark.image_index = 0;
				killspark.image_speed = 0.045;
				killspark.alarm[0] = 70;
				killspark.depth = depth + 1;
				sound_play(killscreen_voice);
				screen_shake(30,30);
				freezer  = instance_create(enemy.x,enemy.y,obj_freeze)
				freezer2  = instance_create(x,y,obj_freeze)
				effect_create_above(ef_ellipse,enemy.x,enemy.y+10,1,c_black)
				freezer.alarm[0] = 50
				freezer2.alarm[0] = 5
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = enemy.x - 30;
				spark.camera_r = enemy.x + 30;
				spark.camera_u = enemy.y - 50;
				spark.camera_d = enemy.y;
				spark.camera_boundary_zoom = 100;
				spark.alarm[0] = 50;
				spark2 = instance_create(enemy.x+8*(1-facing*2),enemy.y-26,obj_spark_hit3)
				spark2.alarm[0] = 25
				}
				}