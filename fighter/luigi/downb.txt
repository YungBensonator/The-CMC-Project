fast_fall = 0;
fast_fall_temp = 0;
if ( state_type = "stand" || state_type = "run" || state_type = "crouch" || state_type = "jump" )
  {
    state_type = "air_attack";
    attack_type = "downb";
    timer = 0;
    time = 72;
    sprite_index = downb_sprite;
    image_speed = 0;
    image_index = 0;
    vspeed -= 0.1;
    temp = 0; //used for mashing
  }

if ( timer < time )
  {
    switch ( timer )
      {
	case 1: image_index = 1; break;
	case 2: image_index = 2; break;
	case 4: image_index = 3; break;
	case 6: image_index = 4; break;
	case 8: image_index = 5; break;
	case 10: image_index = 6; break;
	case 12: image_index = 7; break;
	case 14: image_index = 8; break;
	case 16: image_index = 9; break;
	case 18: image_index = 10; break;
	case 20: image_index = 11; break;
	case 22: image_index = 12; break;
	case 24: image_index = 13; break;
	case 26: image_index = 14; break;
	case 28: image_index = 15; break;
	case 30: image_index = 16; break;
	case 32: image_index = 17; break;
	case 34: image_index = 3; break;
	case 36: image_index = 18; break;
	case 38: image_index = 19; break;
	case 43: image_index = 20; break;
	case 44: image_index = 21; image_xscale *= 1.1; image_yscale *= 1.1; break;
	case 46: image_index = 22; break;
	case 48: image_index = 23; break;
	case 50: image_index = 24; break;
	case 53: image_index = 25; break;
	case 65: image_index = 26; break;
	case 67: image_index = 27; break;
      }
    if ( temp > 0 )
	temp -= 1;

    if ( timer = 2 )
      {
	sound_play(downb_sound);
	instance_create(x,y,obj_down_impact);
	/*if ( air > 0 && tornadoboost )
	    vspeed = -0.5*size;*/
      }
if (target.weight >= 3)
	{
		multispd = clamp(sqrt(sqr(abs(hspeed)* 1.1) + sqr(abs(vspeed - 2))),4.5,20);
	}
	else
	{
		multispd = clamp(sqrt(sqr(abs(hspeed)* 1.1) + sqr(abs(vspeed - 2))),3,10);
	}	
	multiangle = point_direction(tempx,tempy,x,y);
	
	tempx=x;
	tempy=y;
    if ( timer = 4 || timer = 12 || timer = 20 )
      {
	sound_play(spin_sound);
	if hspeed > 2 {
	create_hitbox(3,multiangle,multispd,0,3,4,kick2,obj_spark_hit3,1.2,0.65,1,18,self.id,5,2);
	hitbox.di = 0.3;
	}
	else if hspeed < -2 {
	create_hitbox(3,multiangle,multispd,0,3,4,kick2,obj_spark_hit3,1.2,0.65,1,18,self.id,5,2);
	hitbox.di = 0.3;
	}
	else {
	create_hitbox(2,multiangle,multispd,0,3,4,kick2,obj_spark_hit3,1.2,0.65,1,18,self.id,8,2);
	hitbox.di = 0.3;
	}
      }
    if ( timer = 8 || timer = 16 || timer = 25 )
      {
	sound_play(spin_sound);
      }
    if ( timer = 30 )
      {
	sound_play(spin_sound);
	if hspeed > 2 {
	create_hitbox(3,multiangle,multispd,0,3,4,kick2,obj_spark_hit3,1.2,0.65,1,18,self.id,5,2);
	hitbox.di = 0.3;
	}
	else if hspeed < -2 {
	create_hitbox(3,multiangle,multispd,0,3,4,kick2,obj_spark_hit3,1.2,0.65,1,18,self.id,5,2);
	hitbox.di = 0.3;
	}
	else {
	create_hitbox(3,multiangle,multispd,0,3,4,kick2,obj_spark_hit3,0.6,0.65,10,18,self.id,5,2);
	hitbox.di = 0.3;
	create_hitbox2(3,multiangle,multispd,0,3,4,kick2,obj_spark_hit3,0.6,0.65,-9,18,self.id,5,2);
	hitbox2.di = 0.3;
	}

	if vspeed < 0 {
	hitbox.dir = 90
	hitbox2.dir = 90
	hitbox.bkb = 5.5
	hitbox2.bkb = 5.5 }
	  }
    if ( timer = 44 )
      {
	sound_play(downb_voice);
	sound_play(spin_sound);
	create_hitbox(3,80+facing*20,5.85,5.94,5,5,kick2,obj_spark_hit4,0.6,0.70,10,21,self.id,3,2);
	hitbox.hit_stun = 12
	create_hitbox2(3,100-facing*20,5.85,5.94,5,5,kick2,obj_spark_hit4,0.6,0.70,-9,21,self.id,3,2);
	hitbox2.hit_stun = 16
	hspeed = 0;
	air_move = 0;
	if ( air = 0 )
	  {
	    duster = instance_create(x+size*(6-facing*12),y,obj_dust_effect);
	    duster.facing = 1-facing;
	    duster.image_alpha = 0.75;
	    duster.image_xscale *= 0.6*size;
	    duster.image_yscale *= 0.4*size;
	    duster = instance_create(x-size*(6-facing*12),y,obj_dust_effect);
	    duster.facing = facing;
	    duster.image_alpha = 0.75;
	    duster.image_xscale *= 0.6*size;
	    duster.image_yscale *= 0.4*size;
	  }
	else
	    vspeed -= 3*size;
      }
    if ( timer <= 39 )
      {
	if ( moveright && hspeed < 4.5*size )
	    hspeed += size * ( 0.8 - (air>0) * 0.16 );
	if ( moveleft && hspeed > -4.5*size )
	    hspeed -= size * ( 0.8 - (air>0) * 0.16 );
	if !moveleft && !moveright && hspeed > 0
	    hspeed -= size*1
	if !moveleft && !moveright && hspeed < 0
	    hspeed += size*1
	if !moveleft && !moveright && hspeed > -1.5 && hspeed < 1.5
	    hspeed = 0
      }
    if ( air > 0 )
      {
	if ( hspeed > 2*size )
	    hspeed = 2*size;
	if ( hspeed < -2*size )
	    hspeed = -2*size;
      }
    if ( (special || (ai && (offstage || ai_state = "recover"))) && tornadoboost && temp <= 0 )
      {
	vspeed -= 3.25*size;
	special = 0;
	temp = 7;
	if ( air > 0 && vspeed > 0 )
	    vspeed = 0;
	if ( air > 0 && vspeed < -3.75 )
	    vspeed = -3.75*size;
      }
    if ( timer >= 32 )
	tornadoboost = 0;
  }

if ( timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" )
  {
	attack_type = "none";
	state_type = "stand";
	if air > 0
	{
    state_type = "jump";
	sprite_index = jump_sprite;
	image_index = 4;
	image_speed = 0;
	}
    timer = 0;
    time = -1;
  }