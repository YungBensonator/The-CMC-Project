fast_fall = 0
fast_fall_temp = 0
if state_type = "jump" || state_type = "run" || state_type = "stand" || state_type = "crouch" {
        state_type = "air_attack"
        attack_type = "downb"
        image_speed = 0
        sprite_index = downb_sprite
        image_index=0
        timer = 0
        time = 200
		hspeed = 0
		air_move = 0
		has_hit = 0
}
if ( timer < time )
    {
	
    switch (timer) { 
	case 4: image_index = 1; break; 
	case 14: image_index = 2; break; 
	case 17: image_index = 3; break; 
	case 20: image_index = 4; break; 
	case 21: image_index = 5; break; 
	case 22: image_index = 6; break; 
	case 23: image_index = 7; break; 
	case 24: image_index = 8; break; 
	case 25: image_index = 9; break; 
	case 26: image_index = 10; break; 
	case 27: image_index = 11; break; 
	case 28: image_index = 12; break; 
	case 29: image_index = 13; break; 
	case 30: image_index = 14; break; 
	case 31: image_index = 15; break; 
	case 32: image_index = 16; break; 
	case 33: image_index = 17; break; 
	case 34: image_index = 18; break; 
	case 35: image_index = 19; break; 
	case 36: image_index = 20; break; 
	case 37: image_index = 21; break; 
	case 38: image_index = 22; break; 
	case 39: image_index = 23; break; 
	case 40: image_index = 24; break; 
	case 41: image_index = 25; break; 
	case 42: image_index = 26; break; 
	case 43: image_index = 27; break; 
	case 45: image_index = 28; break; 
	case 47: image_index = 29; break; 
	case 50: image_index = 30; timer = 75; break; 
}

if timer = 21
{
	downbfx = create_blur(x+place_x(184),y+place_y(34),self.id);
	downbfx.sprite_index = downb_fx;
	downbfx.image_index = 0;
	downbfx.image_speed = 0;
	downbfx.snap = self.id;
	downbfx.image_xscale = 0.4 * (1-facing*2) * size;
	downbfx.image_yscale = 0.4 * size;
	downbfx.depth = depth - 1;
}


    switch (timer) { 
	case 22: downbfx.image_index = 1; break; 
	case 23: downbfx.image_index = 2; break; 
	case 24: downbfx.image_index = 3; break; 
	case 25: downbfx.image_index = 4; break; 
	case 26: downbfx.image_index = 5; break; 
	case 27: downbfx.image_index = 6; break; 
	case 28: downbfx.image_index = 7; break; 
	case 29: downbfx.image_index = 0; break; 
	case 30: downbfx.image_index = 1; break; 
	case 31: downbfx.image_index = 2; break; 
	case 32: downbfx.image_index = 3; break; 
	case 33: downbfx.image_index = 4; break; 
	case 34: downbfx.image_index = 5; break; 
	case 35: downbfx.image_index = 6; break; 
	case 36: downbfx.image_index = 7; break; 
	case 37: downbfx.image_index = 0; break; 
	case 38: downbfx.image_index = 1; break; 
	case 39: downbfx.image_index = 2; break; 
	case 40: downbfx.image_index = 3; break; 
	case 41: downbfx.image_index = 4; break; 
	case 42: downbfx.image_index = 5; break; 
	case 43: downbfx.image_index = 6; break; 
	case 45: downbfx.image_index = 7; break; 
	case 47: downbfx.image_index = 0; break; 
	case 75: with downbfx instance_destroy(); break;
	}

if timer = 20
{
if random (2) > 1
	{
	sound_play(nair_voice);
	}
	
sound_play(chain_sound);

speed = 12
direction = angle_correct(65)
	create_hitbox(3,370,8.2,0,30,2,slash2,obj_spark_slash3,3.3,3.3,abs(place_x(110)),-place_y(124),self.id,9,3);
	hitbox.image_angle = angle_correct(0)
	hitbox.execute_on_hit = "attacker.has_hit = 1"
	hitbox.di = 0
	hitbox.sdi = 0
	hitbox.weight_kb = 1

}
	  
	if timer = 30 or timer = 38
	{
	create_hitbox(2,370,8.2,0,3,1,slash2,obj_spark_slash3,3.3,3.3,abs(place_x(110)),-place_y(124),self.id,9,3);
	hitbox.image_angle = angle_correct(0)
	hitbox.execute_on_hit = "attacker.has_hit = 1"
	hitbox.di = 0
	hitbox.sdi = 0
	hitbox.weight_kb = 1
	
sound_play(chain_sound);
	}
	
	if timer = 76
	{
	create_hitbox(5,angle_correct(280),8,3,20,5,slash2,obj_spark_slash3,1.4,1.4,abs(place_x(235)),-place_y(51),self.id,300,4);
	hitbox.image_angle = angle_correct(0)
	hitbox.hit_stun = 20
	has_hit = 0
	}

	if has_hit = 1 and timer < 76 {
		target.direction = point_direction(target.x,target.y,x+place_x(220),y+place_y(80))
	}


	if air != 0 and timer < 20
	{
	hspeed*=.9
	vspeed*=.9
	
	gravity_lock = 1
	}


	if air != 0 and timer >= 21 and timer < 76
	{
	hspeed*=.94
	vspeed*=.9
	
	grav = .25
	gravity_lock = 1
	}
	
	if timer >= 76 and timer < 200
	{
	speed = 9
	gravity_lock = 1
	direction = angle_correct(270)
	}
	
	
	//MOVE LAND
	if timer >= 22 and timer < 200 and air = 0
	{
	with hitbox instance_destroy();
	timer = 300
	time = 382
	sprite_index = downbland_sprite;
	image_index = 0
	state_type = "attack"
	
	if random (2) > 1
	{
	sound_play(choose(smash_voice1,smash_voice2,smash_voice3,smash_voice4));
	}
	
sound_play(chain_sound);

sound_play2(fire2);
	
	hspeed = 0
	
	screen_shake(6,5)
	duster = instance_create(x-14*(1-facing*2),y,obj_dust_effect);
	duster.image_xscale *= 0.4*size;
	duster.image_yscale *= 0.4*size;
	duster.facing = facing; 
	
	duster = instance_create(x+place_x(230),y,obj_dust_effect);
	duster.image_xscale *= 0.4*size;
	duster.image_yscale *= 0.4*size;
	duster.facing = !facing; 
	
	groundslamvfx = create_spark ( abs(place_x(198)), 0 , sideb3downground_fx , .5 , .4 , .4 );
	groundslamvfx.snap = self.id;
	groundslamvfx.owner = self.id;
	groundslamvfx.keepmain = self.keepmain;
	
	firepillar = create_projectile( 4 , angle_correct(35) , 7 , 7.7 , 49 , 14 , fire3 , obj_spark_fire1, 0.5, 0.5, abs(place_x(195)), -place_y(117), self.id, 50, char_custom2);
    firepillar.sprite_index = firepillar_sprite
	firepillar.image_speed = 0;
	firepillar.priority = 3;
	firepillar.owner = self.id;
	firepillar.keepmain = self.keepmain;
	
	}
	
	  switch (timer) { 
	case 303: image_index = 1; break; 
	case 306: image_index = 2; break; 
	case 332: image_index = 3; break; 
	case 336: image_index = 4; break; 
	case 340: image_index = 5; break; 
	case 344: image_index = 6; break; 
	case 348: image_index = 7; break; 
}

	/*
	if timer = 4
	{
	create_hitbox(1,angle_correct(angle_here),3,4,5,6,punch3,obj_spark_hit1,1,1,abs(place_x(20)),-place_y(20),self.id,10,3);
	hitbox.image_angle = angle_correct(angle_here)
	}
	*/
	
	/*
	if timer = 4
	{
	projectilething =
	create_projectile(5, angle_correct(angle_here), 5, 6.25, 15, 7.5, kick2, obj_spark_hit3, .25, .25, abs(place_x(130)), -place_y(104), self.id, 30, char_custom1);
	projectilething.sprite_index = insert_sprite_here
	projectilething.image_speed = .5;
	}
	*/
	
	/*
	if timer = 4
	{
	vfxthing = create_spark ( xpos , ypos , sprite_index , image_speed , xscale , yscale );
	vfxthing.alarm[0] = lifespan of the spark here
	vfxthing.snap = self.id;
	vfxthing.owner = self.id;
	vfxthing.keepmain = self.keepmain;
	vfxthing.script = char_custom10;
	}
	*/

}
if timer >= time-2 && state_type != "flinch" && state_type != "air_flinch" {
    attack_type = "none";
    if air > 0
        state_type = "jump";
    else
        state_type = "stand";
    timer = 0;
    time =-1;
}
        
