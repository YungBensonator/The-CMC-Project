if time = -1 {
hspeed = 0;
state_type = "attack";
attack_type = "uthrow";
image_speed = 0;
sprite_index = uthrow_sprite;
image_index=0;
timer = 0;
time = 54;
timer_speed=1;
target.timer_speed = 0;
target.alarm[0] = 35
}
if timer < time {	 
 switch ( timer )
      {
	case 4: image_index = 1; break;
	case 7: image_index = 2; break;
	case 8: image_index = 3; break;
	case 18: image_index = 4; break;
	case 20: image_index = 5; break;
	case 22: image_index = 6; break;
	case 45: image_index = 7; break;
	case 48: image_index = 8; break;
	case 51: image_index = 9; break;
      }
	
	if timer = 18
	{
	
	if random (2) > 1
	{
	sound_play(choose(smash_voice1,smash_voice2,smash_voice3,smash_voice4));
	}
	sound_play(chain_sound);
    create_hitbox ( 14 , angle_correct(65) , 6 , 7.2 , 40 , 14 , slash3 , bloodupright3_hs , 1.20 , 1.9 , 32.20 , 22.40 , self.id , 5 , 3 );
    hitbox.image_angle = ( 1 - facing * 2 ) * 0;
    create_hitbox2 ( 14 , angle_correct(65) , 6 , 7.2 , 40 , 14 , slash3 , bloodupright3_hs , 1.20 , 2 , 32.20 , 23.40 , self.id , 5 , 3 );
    hitbox2.image_angle = ( 1 - facing * 2 ) * 0;
	if facing = 0
	{
	hitbox.gfx = bloodupright3_hs
	}
	if facing = 1
	{
	hitbox.gfx = bloodupleft3_hs
	}
	}
	
	if timer = 16
	{
    usmashfx = create_blur(x,y,self.id);
    usmashfx.sprite_index = usmash_fx;
    usmashfx.image_index = 0;
    usmashfx.image_speed = 0;
    usmashfx.image_xscale = 0.4 * (1-facing*2) * size;
    usmashfx.image_yscale = 0.4 * size;
    usmashfx.depth = depth - 1;
    usmashfx.x = x + place_x(98);
	usmashfx.y = y + place_y(59);
	}
	
	 switch ( timer )
      {
	case 18: usmashfx.image_index = 1; break;
	case 20: usmashfx.image_index = 2; break;
	case 22: usmashfx.image_index = 3; break;
	case 24: usmashfx.image_index = 4; break;
	 }
	 
	 if timer = 26
	 {
	 if instance_exists (usmashfx)
	 {
	 with (usmashfx) {instance_destroy();}
	 }
	 }
	 
	 if timer = 20
	 {
	hitbox.hitbox_x = size * ( 1 - ( facing * 2 ) ) * 0.60
    hitbox.hitbox_y = size * 57.80
    hitbox.image_xscale = size * 2.5
    hitbox.image_yscale = size * 1.4
    hitbox2.hitbox_x = size * ( 1 - ( facing * 2 ) ) * 32.20
    hitbox2.hitbox_y = size * 23.40
    hitbox2.image_xscale = size * 1.2
    hitbox2.image_yscale = size * 2
	
	duster = instance_create(x+33*(1-facing*2),y,obj_dust_effect);
	duster.image_xscale *= 0.5*size;
	duster.image_yscale *= 0.5*size;
	duster.facing = !facing; 
	 }
}

if timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" {
    attack_type = "none";
    state_type = "stand";
    timer = 0;
    time =-1;
}
        
