fast_fall = 0
fast_fall_temp = 0
if state_type = "run" || state_type = "stand" || state_type = "jump" {
    movedown = 0
    attacking = 0;
    special = 1;
    timer = 0;
    temp = 0
	temp2 = 0;
    temp3 = 0; //for Misogi
    jabbing = 0;
    attack_type = "upb"
    sprite_index = upb_sprite;
    image_index = 1;
    image_speed = 0;
    temp_target = 0;
    canceltemp = 0
    if moveright = 1 facing = 0
    if moveleft = 1 facing = 1
    if air = 0 {
        hspeed = 0;
    }
    state_type = "air_attack";
    if moveup[1] > 0 || (ai && temp = 0 && random(5)>3.8) || sftemp = -1 {
        temp = 2
        sound_play(up_b_ex_voice)
	intangible = 1
	if sftemp2 = 1
	facing = 0
	if sftemp2 = 2
	facing = 1
    }
    else
        sound_play(up_b_voice)
    time = 36 + temp*2;
    air_move=0
}

if ( temp = 2 )
{
    
    switch ( timer )
    {
        case 2: image_index = 2; break;
        case 4: image_index = 3; break;
        case 6: sprite_index = upb_ex_sprite; image_index = 1; break;
        case 7: image_index = 2; break;
        case 9: image_index = 3; break;
        case 31: image_index = 5; break;
        case 33: image_index = 6; break;
        case 35: image_index = 7; break;
        case 37: image_index = 8; break;
        case 39: image_index = 9; break;
        case 200: image_index = 0; break;
        case 202: image_index = 1; break;
        case 204: image_index = 2; break;
        case 206: image_index = 3; break;
        case 208: image_index = 4; break;
        case 210: image_index = 5; break;
        case 212: image_index = 6; break;
        case 214: image_index = 7; break;
        case 235: image_index = 8; break;
        case 238: image_index = 9; break;
    }
}
else
{
    switch ( timer )
    {
        case 1: image_index = 2; break;
        case 3: image_index = 3; break;
        case 4: image_index = 4; break;
        case 7: image_index = 5; break;
        case 29: image_index = 6; break;
        case 31: image_index = 7; break;
        case 33: image_index = 8; break;
        case 35: image_index = 9; break;
    }
}
if timer > 25 && !temp3
vspeed = -2.45*size
force_edge_grab = 1
	if timer > 1 {
	attacktemp = 0
	sftemp_timer = 0
	}
	if attack_success || attack_shielded
	canceltemp = 1
if temp < 2 {
    if timer < 8 {
        vspeed = 0
        gravity = 0 }
    if timer = 4 {
        create_hitbox(6,55+facing*70,3.3,0,10,4,sf_punch3,obj_spark_special2,0.75,0.65,7,15,self.id,1,4) 
        intangible = 1;
        if air = 0 {
            duster = instance_create(x,y,obj_dust_effect);
            duster.facing = facing; 
        }
    }
    if timer = 6
        hspeed = (3 - facing*6)*size
    if timer = 7 {
        sound_play(attack_sound3)
        create_hitbox(6-jabbing,75+facing*30,6.65,1.75,10,9,sf_punch3,obj_spark_special2,0.65,0.9,7,35,self.id,16,4)
        intangible = 0;
        vspeed = -7.45*size
        hspeed = (2-facing*4)*size
        state_type = "air_attack"
        air_move=0
    }
    if timer = 10 || timer = 11 || timer = 12 {
        vspeed -= .5
    }
    if timer = 19 {
         hspeed -= 1-facing*2
         air = max_jumps 
    }
}  
else {
    if timer < 9 {
        vspeed = 0
        gravity = 0
    }
    if timer = 6 {
        sound_play(ex_sound)
        create_hitbox(3,55+facing*70,3.5,0,8,4,sf_punch3,obj_spark_special2,0.75,0.8,7,15,self.id,1,4) 
        intangible = 1
        hitbox.hitshake_type = 2
        if air = 0 {
            duster = instance_create(x,y,obj_dust_effect);
            duster.facing = facing; 
        }
    }
    if timer = 7  {
        create_hitbox(3,80+facing*20,4.5,0,7,4,sf_punch3,obj_spark_special2,0.75,0.8,7,15,self.id,1,3) 
        hitbox.hitshake_type = 2;
    }
    if ( timer >= 7 && timer < 9 && attack_success && special && air = 0 )
            temp3 = 1;
    if timer = 6 && air = 0
        hspeed = (3.25 - facing*6.5)*size
    if ( temp3 = 0 )
    {
        if timer = 9 {
            intangible = 0
            sound_play(attack_sound3)
            create_hitbox(9,75+facing*30,6.96,7.2,9,12,sf_punch3,obj_spark_special2,0.6,1.75,7,35,self.id,20,4)
            hitbox.hitshake_type = 2
            hitbox.shake_ampl = 0.35
            vspeed = -7.95*size
            hspeed = 2.85-facing*5.7
            state_type = "air_attack"
            air_move=0
        }
        if timer = 19 {
            hspeed -= 1-facing*2
            air = max_jumps 
            vspeed = 0
            intangible = 0
        }
    }
    else
    {
        if timer = 9
        {
            intangible = 0
            sound_play(attack_sound3)
            create_hitbox(3,78+facing*24,7,0,5,6,sf_punch3,obj_spark_special2,0.6,1.15,7,35,self.id,16,3)
            hitbox.hitshake_type = 2
            hitbox.shake_ampl = 0.35
            hitbox.di = -1;
            hitbox.weight_kb = 1;
            hitbox.hit_stun = 18;
            vspeed = -7.8*size
            hspeed = 1-facing*2;
            state_type = "air_attack"
            air_move=0
            time = 199;
        }
        if ( timer = 41 )
        {
            sprite_index = misogi_sprite;
            image_index = 0;
            image_speed = 0.25;
            sound_play(falling_sound);
            sound_play(taunt_voice);
            create_hitbox( 3 , 290 , 9 , 0 , 14 , 12 , sf_kick2 , obj_spark_special1 , 0.9 , 0.9 ,-2 , 50 , self.id , 159 , 2);
            hitbox.hit_stun = 55;
            hitbox.weight_kb = 1;
	        hitbox.di = -1
            hspeed = 0;
            vspeed = 8.15*size;
        }
        if ( timer > 41 && timer < 200 )
        {
            vspeed = 8.75*size
            target.direction = point_direction(target.x, target.y, x+ 10 * size * (1-facing*2), y - 10)
            if ( target > 0 )
            {
                hitbox.time = 1;
            }
            target.x = x+(-2+facing*4);
            target.y = y-42;
            target.state_type = "air_flinch";
            target.attack_type = "none";
            target.sprite_index = target.flinch_sprite;
        }
        if ( timer >= 41 && timer < 200 && air = 0 )
        {
            timer = 200
            time = 240;
            spark = 0;
            sprite_index = misogi_land_sprite;
            image_speed = 0;
        }
        if ( timer = 206 )
        {
            create_hitbox(8,85+facing*10,6.45,7.5,915,12,fire4,obj_spark_special1,1.5,2.8,0,23,self.id,12,2);
            sound_play(explode_sound);
            spark2 = instance_create(x,y,obj_spark);
            spark2.sprite_index = misogi_effect_sprite2;
            spark2.image_speed = 0.5;
            spark2.image_xscale = size*0.4;
            spark2.image_yscale = size*0.4;
            spark2.x = x;
            spark2.y = y;
        }
    }   
} 
if temp = 2 && frac(timer/4) < 0.5 && timer < 28 {
    image_blend=c_yellow
    alarm[7] = 5
 }
else image_blend=c_white 
if timer = temp*2 + 31 && temp3 = 0
    air_move = 1



if (timer >= 9) && temp3 == 0{
if (attack_success || target.object_index == obj_enemy) && (dontrepeat = 0) && obj_score_control.stocks[target.number-1] == 1{
				if ((target.weight <= .22 && target.percent > 95) || (target.weight > .22 && target.weight < .3 && target.percent > 110) || (target.weight > .3 && target.percent > 125)){
				                killspark = instance_create(target.x-200,target.y-170,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.65;
				killspark.image_yscale = size * 0.85;
	            killspark.image_xscale = size * 0.45;
				killspark.image_yscale = size * 0.65;
                killspark.image_xscale = size * 0.65;

				killspark.image_index = 0;
				killspark.image_speed = 0.045;
				killspark.alarm[0] = 80;
				killspark.depth = depth + 1;
				sound_play(killscreen_voice);
				screen_shake(30,30);
				freezer  = instance_create(target.x,target.y,obj_freeze)
				freezer2  = instance_create(x,y,obj_freeze)
				effect_create_above(ef_ellipse,target.x,target.y+10,1,c_black)
				freezer.alarm[0] = 78
				freezer2.alarm[0] = 80
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = target.x - 50;
				spark.camera_r = target.x + 50;
				spark.camera_u = target.y - 80;
				spark.camera_d = target.y;
				spark.camera_boundary_zoom = 20;
				spark.alarm[0] = 60;
				spark2 = instance_create(target.x+8*(1-facing*2),target.y-26,obj_spark_hit3)
				spark2.alarm[0] = 50
				dontrepeat = 1;
				}
				}
        
  }	  

if (timer >= 206){
if (attack_success || target.object_index == obj_enemy) && (dontrepeat = 0 && obj_score_control.stocks[target.number-1] == 1){
				if ((target.weight <= .22 && target.percent > 115) || (target.weight > .22 && target.weight < .3 && target.percent > 130) || (target.weight > .3 && target.percent > 145)){
				                killspark = instance_create(target.x-200,target.y-170,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.65;
				killspark.image_yscale = size * 0.85;
	            killspark.image_xscale = size * 0.45;
				killspark.image_yscale = size * 0.65;
                killspark.image_xscale = size * 0.65;

				killspark.image_index = 0;
				killspark.image_speed = 0.045;
				killspark.alarm[0] = 80;
				killspark.depth = depth + 1;
				sound_play(killscreen_voice);
				screen_shake(30,30);
				freezer  = instance_create(target.x,target.y,obj_freeze)
				freezer2  = instance_create(x,y,obj_freeze)
				effect_create_above(ef_ellipse,target.x,target.y+10,1,c_black)
				freezer.alarm[0] = 78
				freezer2.alarm[0] = 80
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = target.x - 50;
				spark.camera_r = target.x + 50;
				spark.camera_u = target.y - 80;
				spark.camera_d = target.y;
				spark.camera_boundary_zoom = 20;
				spark.alarm[0] = 60;
				spark2 = instance_create(target.x+8*(1-facing*2),target.y-26,obj_spark_hit3)
				spark2.alarm[0] = 50
				dontrepeat = 1;
				}
				}
        
  }	  

if timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" {
    canceltemp = 0
    sftemp2 = 0
    attack_type = "none";
    dontrepeat = 0
    if( air = 0 && temp3 )
        state_type = "stand";
    else
    {
        air=max_jumps
        state_type = "fall";
        hspeed = 1 - facing*2;
    }
    special = 0;
    timer = 0;
    time =-1;
}
        
