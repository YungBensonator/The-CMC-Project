if ( state_type == "jump" )
  {
  vspeed -= 0.1;
  state_type = "air_attack";
  attack_type = "fair";
  image_speed = 0;
  image_index = 0;
  sprite_index = fair_sprite2;
  timer = 0;
  time = 25;
  timer_speed = 1;
  }

switch (timer)
{
case 7: image_index = 1; sound_play(swingsnd2); play_attack_voice(); break;
case 10: image_index = 2; break;
case 13: image_index = 3; break;
case 21: image_index = 4; break;
case 24: image_index = 5; break;
}

//Sword trail shit starts here
    switch (timer) {
        case 0: sword_trail = create_sword_trail(self.id, 1, 30, spread_texture); sword_trail.index = 1; sword_trail.depth = 1; break;
		case 7: sword_trail.index += 1; break;
		case 10: sword_trail.index += 1; sword_trail.end_decay = 0.33; break;
        case 13: sword_trail.index += 1; sword_trail.end_decay = 0.66;break;
        case 14: sword_trail.end_decay = 1; break;
        case 15: sword_trail.end_decay = 1.5; break;
        case 16: sword_trail.end_decay = 2; break;
        case 17: sword_trail.end_decay = 2.5; break;
        case 18: sword_trail.end_decay = 3; break;
        case 19: sword_trail.end_decay = 3.5; break;
        case 20:
            with(sword_trail) {
                instance_destroy();
            }
            break;
    } 
    //Sword trail shit ends here   

if timer = 7
{
    create_hitbox ( 8 , 20 + facing * 140 , 4.5 , 5.5 , 17 , 5 , slash3 , obj_spark_slash3 , 1.13 , 0.5 , 22.63 , 40.88 , self.id , 7 , 3 );
    hitbox.image_angle = ( 1 - facing * 2 ) * 47.49;
}

if timer = 10
{
    hitbox.hitbox_x = size * ( 1 - ( facing * 2 ) ) * 26.28
    hitbox.hitbox_y = size * 27.01
    hitbox.image_xscale = size * 1.12
    hitbox.image_yscale = size * 0.5
    hitbox.image_angle = ( 1 - facing * 2 ) * 0
}

if timer = 13	
{
    hitbox.hitbox_x = size * ( 1 - ( facing * 2 ) ) * 21.90
    hitbox.hitbox_y = size * 13.87
    hitbox.image_xscale = size * 1.00
    hitbox.image_yscale = size * 0.51
    hitbox.image_angle = ( 1 - facing * 2 ) * 313.60
}

if air = 0 
    {
    state_type="land";
    attack_type="none";
    sprite_index = land_sprite;
    timer=0;
    time=13; 
	}
if (timer >= 4){
if (attack_success || target.object_index == obj_enemy) && (obj_score_control.stocks[target.number-1] == 1  && dontrepeat = 0 && target.offstage){
				if ((target.weight <= .22 && target.percent > 90) || (target.weight > .22 && target.weight < .3 && target.percent > 100) || (target.weight > .3 && target.percent > 110)){
				killspark = instance_create(enemy.x-200,enemy.y-250,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.75;
				killspark.image_yscale = size * 0.95;
				killspark.image_yscale = size * 0.95;
				killspark.image_index = 0;
				killspark.image_speed = 0.045;
				killspark.alarm[0] = 80;
				killspark.depth = depth + 2 ;
				sound_play(killscreen_voice);
				screen_shake(30,30);
				freezer  = instance_create(enemy.x,enemy.y,obj_freeze)
				effect_create_above(ef_ellipse,enemy.x,enemy.y+10,1,c_black)
				freezer.alarm[0] = 80
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = enemy.x - 30;
				spark.camera_r = enemy.x + 30;
				spark.camera_u = enemy.y - 50;
				spark.camera_d = enemy.y;
				spark.camera_boundary_zoom = 120;
				spark.alarm[0] = 50;
				spark2 = instance_create(enemy.x+8*(1-facing*2),enemy.y-26,obj_spark_hit3)
				spark2.alarm[0] = 50
				dontrepeat = 1;
				}
				}
        
  }	    
if ( timer >= time - 1 )
  {
  attack_type = "none";
  if ( air > 0 )
    state_type = "jump";
    else
    state_type = "stand";
  timer = 0;
  time = -1;
  }