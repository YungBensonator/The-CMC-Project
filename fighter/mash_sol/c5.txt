fast_fall = 0;
fast_fall_temp = 0;

if ( state_type == "run" || state_type == "stand" || state_type == "jump" && air < max_jumps )
  {
  attacking = 0;
  special = 0;
  attack_type = "c5";
  time = 47;
  timer = 0;
  state_type = "air_attack";
  hspeed = 0;
  sprite_index = upb_sprite;
  image_index = 0;
  image_speed = 0;
  timer_speed = 1;
  air_move = 0;
  has_hit = 0;
  if moveright
  {
  facing = 0;
  }
  else if moveleft
  {
  facing = 1;
  }
  intangible = 1;
  }
  
if timer >= 9 and timer < 100
{
force_edge_grab = 1;
}  
  
if timer = 9
{
intangible = 0;
}  
  
switch ( timer )
  {
  case 3: image_index = 1; break;
  case 6: image_index = 2; sound_play(upb_sound); sound_play(choose(upb_voice,upb_voice2)); break;
  case 9: image_index = 3; break;
  case 12: image_index = 4; break;
  case 23: image_index = 5; break;
  case 26: image_index = 6; break;
  case 29: image_index = 7; break;
  case 32: image_index = 8; break;
  case 35: image_index = 9; break;
  case 37: image_index = 10; break;
  case 39: image_index = 11; break;
  case 41: image_index = 12; break;
  case 43: image_index = 13; break;
  case 45: image_index = 14; break;
  }

if timer = 3
{
    viperfx = create_blur(x,y,self.id);
    viperfx.sprite_index = upb_fx;
    viperfx.image_index = 0;
    viperfx.image_speed = 0;
    viperfx.image_xscale = 0.19 * (1-facing*2) * size;
    viperfx.image_yscale = 0.19 * size;
    viperfx.depth = depth - 1;
}

if timer = 6
{
    create_hitbox ( 3 , 85 + facing * 10 , 5.5 , 1 , 10 , 8 , solhit3 , obj_spark_fire1 , 0.67 , 0.67 , 7.60 , 9.69 , self.id , 5 , 3 );
    hitbox.image_angle = ( 1 - facing * 2 ) * 0;
	hitbox.hit_stun = 7;
    hitbox.execute_on_hit = "attacker.has_hit = 1;"
    create_hitbox2 ( 3 , 85 + facing * 10 , 5.5 , 1 , 10 , 8 , solhit3 , obj_spark_fire1 , 0.62 , 0.60 , 8.74 , 23.37 , self.id , 5 , 3 );
    hitbox2.image_angle = ( 1 - facing * 2 ) * 0;
	hitbox2.hit_stun = 7;
    hitbox2.execute_on_hit = "attacker.has_hit = 1;"
}

if ( has_hit = 1 and timer < 20 )
{
target.direction = point_direction(target.x,target.y, x + 25 * (1-facing * 2) * size , y - actual_height + ( 5 * size ) )
}

if timer = 9
{
    hitbox.hitbox_x = size * ( 1 - ( facing * 2 ) ) * 16.15
    hitbox.hitbox_y = size * 15.58
    hitbox.image_xscale = size * 1.22
    hitbox.image_yscale = size * 0.70
    hitbox.image_angle = ( 1 - facing * 2 ) * 0
    hitbox2.hitbox_x = size * ( 1 - ( facing * 2 ) ) * 14.82
    hitbox2.hitbox_y = size * 31.73
    hitbox2.image_xscale = size * 0.83
    hitbox2.image_yscale = size * 0.55
    hitbox2.image_angle = ( 1 - facing * 2 ) * 0
}

if timer = 12 or timer = 13 or timer = 14 or timer = 15 or timer = 16 or timer = 17 or timer = 18 or timer = 19
{
    create_hitbox ( 1 , 75 + facing * 30 , 6.1 , 0 , 14 , 2 , solhit3 , obj_spark_fire1 , 0.88 , 0.46 , 15.01 , 44.08 , self.id , 5 , 3 );
    hitbox.image_angle = ( 1 - facing * 2 ) * 0;
    hitbox.execute_on_hit = "attacker.has_hit = 1;"
    create_hitbox2 ( 1 , 75 + facing * 30 , 6.1 , 0 , 14 , 2 , solhit3 , obj_spark_fire1 , 0.91 , 0.84 , 14.44 , 26.03 , self.id , 5 , 3 );
    hitbox2.image_angle = ( 1 - facing * 2 ) * 0;
    hitbox2.execute_on_hit = "attacker.has_hit = 1;"
    create_hitbox3 ( 1 , 75 + facing * 30 , 6.1 , 0 , 14 , 2 , solhit3 , obj_spark_fire1 , 0.80 , 0.59 , 15.39 , 11.97 , self.id , 5 , 3 );
    hitbox3.image_angle = ( 1 - facing * 2 ) * 0;
    hitbox3.execute_on_hit = "attacker.has_hit = 1;"
}

if timer = 20
{
    create_hitbox ( 9 , 75 + facing * 30 , 6.6 , 7.8 , 14 , 10 , solhit3 , obj_spark_fire1 , 0.88 , 0.46 , 15.01 , 44.08 , self.id , 5 , 3 );
    hitbox.image_angle = ( 1 - facing * 2 ) * 0;
    create_hitbox2 ( 9 , 75 + facing * 30 , 6.6 , 7.8 , 14 , 10 , solhit3 , obj_spark_fire1 , 0.91 , 0.84 , 14.44 , 26.03 , self.id , 5 , 3 );
    hitbox2.image_angle = ( 1 - facing * 2 ) * 0;
    create_hitbox3 ( 9 , 75 + facing * 30 , 6.6 , 7.8 , 14 , 10 , solhit3 , obj_spark_fire1 , 0.80 , 0.59 , 15.39 , 11.97 , self.id , 5 , 3 );
    hitbox3.image_angle = ( 1 - facing * 2 ) * 0;
}

if timer >=3 and timer < 12
{
    viperfx.x = x + place_x(230);
	viperfx.y = y + place_y(354);
}

if timer >= 12
{
    viperfx.x = x + place_x(255);
	viperfx.y = y + place_y(530);
}

switch ( timer )
  {
  case 6: viperfx.image_index = 1; break;
  case 9: viperfx.image_index = 2; break;
  case 12: viperfx.image_index = 3; break;
  case 14: viperfx.image_index = 4; break;
  case 16: viperfx.image_index = 5; break;
  case 18: viperfx.image_index = 3; break;
  case 20: viperfx.image_index = 4; break;
  case 22: viperfx.image_index = 6; viperfx.image_speed = 0.5; break;
  }

if timer = 9
{
vspeed = 0;
if air  = 0
{
vspeed -= 8.5 * size;
}
if air > 0
{
vspeed -= 9 * size;
}
hspeed = 0;
hspeed = 1.3 * (1-facing*2) * size;
}


if timer >= 6 and timer <= 20
{
if cos(timer*pi)>0.5
after_image(7,c_red,0.5)
}

if (timer > 22 and timer < 100 and air = 0 ) 
{  
    attack_type = "none";
    state_type = "land";
    sprite_index = land_sprite;
    timer=0;
    time = 10; 
}  

if timer >= 23 and timer < 47 and special = 1
{
timer = 100;
time = 132;
sprite_index = upb_sprite2;
image_index = 0;
force_edge_grab = 0;
vspeed -= 2 * size;
}

switch ( timer )
  {
  case 102: image_index = 1; break;
  case 104: image_index = 2; break;
  case 106: image_index = 3; break;
  case 108: image_index = 4; sound_play(swingsound2); break;
  case 110: image_index = 5; break;
  case 112: image_index = 6; break;
  case 114: image_index = 7; break;
  case 116: image_index = 8; break;
  case 119: image_index = 9; break;
  case 122: image_index = 10; break;
  case 125: image_index = 11; break;
  case 128: image_index = 12; break;
  case 130: image_index = 13; break;
  }
  
if timer = 210
{
    create_hitbox ( 3 , 337 - facing * 134 , 3.5 , 4.5 , 13 , 7 , solhit3 , obj_spark_hit3 , 0.88 , 0.47 , 12.35 , 36.10 , self.id , 4 , 2 );
    hitbox.image_angle = ( 1 - facing * 2 ) * 29.00;
}  
  
if timer = 212
{
    hitbox.hitbox_x = size * ( 1 - ( facing * 2 ) ) * 13.11
    hitbox.hitbox_y = size * 27.93
    hitbox.image_xscale = size * 0.97
    hitbox.image_yscale = size * 0.51
    hitbox.image_angle = ( 1 - facing * 2 ) * 0
}  
  
if ( timer >= time - 1 )
  {
  attack_type = "none";
  if ( air > 0 )
    state_type = "fall";
    else
    state_type = "stand";
  timer = 0;
  time = -1;
  }