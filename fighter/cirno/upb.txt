fast_fall = 0;
    fast_fall_temp = 0;
    gravity = 0;
    gravity_lock = 1;
	air_move = 0
if state_type = "run" || state_type = "stand" || state_type = "jump"  && cantupb = 0 && floattime > 0{
    attacking = 0;
    special = 0;
    timer = 0;
    attack_type = "upb"
    image_speed = 0;
    sprite_index = sideb_sprite;
    image_index=0;
    time = 45;
    timer_speed=1;
	speed = 0
	special = 1
	repeating = 0
	temp = 0; //used for direction
    temp_facing = 0; //used for direction
}

if timer < time {
state_type = "air_attack"
	if timer > 44
	force_edge_grab = 1
switch ( timer )
      {
	case 4: image_index = 1; break;
	case 8: image_index = 2; break;
	case 28: image_index = 3; break;
	case 32: image_index = 4; break;

      }
	  
	fast_fall = 0;
    fast_fall_temp = 0;
    gravity = 0;
    gravity_lock = 1;

	if timer = 27{
	sound_play(upb_voice);
	sound_play(upb_sound);
	sound_play(iceform_sound);
    }
	
	
	if timer < 18
	speed = 0
	
	if timer = 18{
	if ( ai && ( offstage || ai_state = "recover" ) )
	  {
	    if ( y > nearest_edge.y )
		moveup = 1;
	    if ( x < nearest_edge.x )
	      {
		moveright = 1;
		moveleft = 0;
	      }
	    if ( x > nearest_edge.x )
	      {
		moveleft = 1;
		moveright = 0;
	      }
	  }
	 if ( moveright && !moveup && !movedown )
	  {
	    direction = 0;
	    facing = 0;
	    temp = direction;
	  }
	else if ( moveleft && !moveup && !movedown )
	  {
	    direction = 180;
	    facing = 1;
	    temp = direction;
	  }
	else if ( moveup && !moveright && !moveleft && !movedown )
	  {
	    direction = 90;
	    image_angle = 90 - facing*180;
	    temp = direction;
	  }
	else if ( movedown && !moveright && !moveleft )
	  {
	    direction = 270;
	    image_angle = 270 - facing*180;
	    temp = direction;
	  }
	else if ( moveup && moveright )
	  {
	    direction = 45;
	    image_angle = 45;
	    facing = 0;
	    temp = direction;
	  }
	else if ( moveup && moveleft )
	  {
	    direction = 135;
	    image_angle = 315;
	    facing = 1;
	    temp = direction;
	  }
	else if ( movedown && moveright )
	  {
	    direction = 315;
	    image_angle = 315;
	    facing = 0;
	    temp = direction;
	  }
	else if ( movedown && moveleft )
	  {
	    direction = 225;
	    image_angle = 45;
	    facing = 1;
	    temp = direction;
	  }
	else {
	if facing = 0{
	direction = 0;
	    facing = 0;
	    temp = direction;}
	else {
	direction = 180;
	    facing = 1;
	    temp = direction;}
	
	
	}
	if ( analog_control )
	  {
	    var dis, dir;
	    dis = point_distance ( 0 , 0 , holdx , holdy );
	    dir = point_direction ( 0 , 0 , holdx , holdy );
	    if ( dis > 0.5 )
	      {
                var dd;
                dd = round ( dir / 45 ) * 45;
                if ( abs ( dir - dd ) < 14 )
                  dir = dd;
		direction = dir;
		temp = direction;
		if ( dir < 85 || dir > 275 )
		  facing = 0;
		if ( dir > 95 && dir < 265 )
		  facing = 1;
	      }
	  }
	
	speed = 6.6
	//intangible = 1

	
	}
	if timer = 19{
	icemeteor_instance = create_blur(x,y,self.id);
	icemeteor_instance.sprite_index = icemeteor_sprite;
	icemeteor_instance.x = x - (9-facing*18)*size;
    icemeteor_instance.y = y-23*size;
    icemeteor_instance.image_speed = 0;
	icemeteor_instance.image_alpha = 0.7;
    icemeteor_instance.image_xscale = 0.3* size
    icemeteor_instance.image_yscale = 0.3* size
    icemeteor_instance.depth = depth + 0.1;
	icemeteor_instance.snap = self.id
	icemeteor_instance.image_angle = temp
	
	}
	
	
	if ai {
        if timer = 32 && random(8)>2
            special = 1
        else
            special = 0
    }
	
	if timer = 43 and special = 1 and floattime > 0{
        timer = 35
		repeating = 1
		gravity_lock = 1
		speed = 7
    }
	if timer > 18 and timer < 34 and floattime <=0{
	floattime = 0
	timer = 34
	}
	if timer > 18 and timer < 34 and floattime > 0
	floattime -=3
	
	if timer > 18 and hitbox.hit =1 and timer < 34{
		timer = 34
		
	}
	
	
	fast_fall = 0;
    fast_fall_temp = 0;
    gravity = 0;
    gravity_lock = 1;
	
	if timer = 44{
	speed *= 0.75
	intangible = 0
	gravity_lock = 0
	repeating = 0
	if instance_exists ( icemeteor_instance )
	{
	with ( icemeteor_instance ) instance_destroy();
	}
	}
	
	if timer = 26 and repeating = 1{
	create_hitbox(max(1,1.5*(motivation/100)),temp,5.5,4,8,3,ice1,freeze2,2.4,1.45,-5,16,self.id,10,2);
	hitbox.image_angle = direction

    }
	
	if timer = 19{
	sound_play(sideb_sound);
	create_hitbox(max(1,1.5*(motivation/100)),temp,4.25,3,8,3,ice1,obj_spark_freeze,2.4,1.45,-5,16,self.id,15,2);
	hitbox.image_angle = direction
	hitbox.hitstun = 8



    }

    if timer = 35{
	create_hitbox(max(1,2.5*(motivation/100)),temp,2.5,3,1.75,4,ice1,,0.9,0.9,-5,16,self.id,10,2);
	hitbox.image_angle = direction
	hitbox.hitstun = 5
    }
	
    //if timer = 5
	//play_attack_voice()
    
	
	if timer < 54 and timer > 34
	speed *= 0.8
	
if ( vspeed > 2 && ( on_floor || on_platform ) )
      {
	if instance_exists ( icemeteor_instance )
	{
	with ( icemeteor_instance ) instance_destroy();
	}
	if ( hitbox > 0 )
	with ( hitbox )
	    instance_destroy();
	image_angle = 0;
	state_type = "air_flinch";
	attack_type = "none";
	timer = 0;
	time = 12;
	sprite_index = flinch_sprite;
	image_speed = 0;
	image_index = 1;
	vspeed = -3*size;
	instance_create(x,y+1,obj_down_impact);
	shaker = instance_create(x,y,obj_shakescreen2);
	shaker.ampl = 2;
      }


        }
if timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" {
        attack_type = "none";
        if air > 0
        state_type = "jump";
        else
        state_type = "stand";
        timer = 0;
        time =-1;
		gravity_lock = 0
		if instance_exists ( icemeteor_instance )
	{
	with ( icemeteor_instance ) instance_destroy();
	}
    }
