fast_fall = 0
fast_fall_temp = 0
if state_type = "stand" || state_type = "run" || state_type = "jump" 
{
	if (smashori && instance_exists(star)) || (rivalsori && cooldown_timer>5)
		exit;
	upbcanceltemp=0
	state_type = "air_attack";
	attack_type = "sideb";
	image_index = 0;
	image_speed = 0;
	special=1
	timer = 0;	
	temp = 1 // used for different launch properties
	if air=0
		{hspeed=0}
	thrown=0
}
if rivalsori
{
if abyssmoves=0 && cooldown_timer<10
{
	if air=0
		{sprite_index = light_burst_prepare_sprite;}
	if air>0
		{sprite_index=light_burst_prepare_air_sprite}
	if air>0 && timer<40
		hspeed*=(time-timer/2.5)/time
	if air=0
		hspeed*=.5
	switch ( timer )
	{
		case 4: image_index=1; break;
		case 8: image_index=2; break;
		case 41: image_index=3;break;
		case 47: image_index=4;break;
		case 53: image_index=5;break;
		case 59: image_index=6;break;
	}
		time = 67;
		if timer=0
		{
			sound_play(sspecial_hold_sound)
			arc = instance_create(x,y,obj_spark)
			arc.number=-number
			arc.depth = depth + 1
			arc.image_xscale = (.75*(1-facing*2))*size
			arc.image_yscale =.75*size
			arc.x = x+(6*(1-facing*2))*size
			arc.y = y-5*size
			arc.sprite_index =light_burst_arc_sprite
			arc.image_index=0
			arc.image_alpha=0
			arc.image_speed=0
		}

		if timer<8
		{
			if arc.image_alpha !=1
				{arc.image_alpha +=0.125}
		}

		if timer <41
		{
			arc.x = x+(6*(1-facing*2))*size
			arc.y = y-5*size
		}

		if !special && timer>8 && timer<39
		{
			special=0
			timer=40
		}
	
		if timer>8 && timer<39
		{
			temp+=1
			arc.image_index+=1
		}
		if timer=40
		{
			sound_stop(sspecial_hold_sound)
			sound_play(sspecial_proj_launch_sound)
			special=0
			libu= create_projectile(5,30+facing*120,3.5,5.2,7,4,libu_explode,obj_spark_fire1,0.65,0.65,5,14.5,self.id,180,char_custom1);
			
			libu.sprite_index = light_burst_proj_sprite
			libu.bkb=(3+temp*.085)*size
			libu.use_palette = number
			libu.image_xscale=(0.8-facing*1.6)*size
			libu.image_yscale=0.8*size
			libu.image_speed =0.2
		
			if temp>4 && temp <11
				{libu.damage=6*size}
			if temp>10 && temp <16
				{libu.damage=7*size}
			if temp>15 && temp<21 
				{libu.damage=8*size}
			if temp>20 && temp< 26
				{libu.damage=9*size}
			if temp>25
				{libu.damage=10*size}
		
			switch(temp)
			{
				case 1:
					libu.hspeed = (1.14 *(1-facing*2))*size;
					libu.vspeed = -1.56*size;
					break;
				case 2:
					libu.hspeed = (1.185 *(1-facing*2))*size;
					libu.vspeed = -1.65*size
					break;
				case 3:
					libu.hspeed = (1.235 *(1-facing*2))*size;
					libu.vspeed = -1.72*size;
					break;
				case 4:
					libu.hspeed = (1.32 *(1-facing*2))*size;
					libu.vspeed = -1.75*size
					break;
				case 5:
					libu.hspeed = (1.43 *(1-facing*2))*size;
					libu.vspeed = -1.75*size
					break;
				case 6:
					libu.hspeed = (1.55 *(1-facing*2))*size;
					libu.vspeed = -1.76*size
					break;
				case 7:
					libu.hspeed = (1.66 *(1-facing*2))*size;
					libu.vspeed = -1.79*size
					break;
				case 8:
					libu.hspeed = (1.75 *(1-facing*2))*size;
					libu.vspeed = -1.81*size
					break;
				case 9:
					libu.hspeed = (1.85 *(1-facing*2))*size;
					libu.vspeed = -1.82*size
					break;
				case 10:
					libu.hspeed = (1.95 *(1-facing*2))*size;
					libu.vspeed = -1.83*size
					break;
				case 11:
					libu.hspeed = (2.08 *(1-facing*2))*size;
					libu.vspeed = -1.84*size
					break;
				case 12:
					libu.hspeed = (2.2 *(1-facing*2))*size;
					libu.vspeed = -1.84*size
					break;
				case 13:
					libu.hspeed = (2.3 *(1-facing*2))*size;
					libu.vspeed = -1.85*size
					break;
				case 14:
					libu.hspeed = (2.4 *(1-facing*2))*size;
					libu.vspeed = -1.85*size
					break;
				case 15:
					libu.hspeed = (2.5 *(1-facing*2))*size;
					libu.vspeed = -1.85*size
					break;
				case 16:
					libu.hspeed = (2.6 *(1-facing*2))*size;
					libu.vspeed = -1.85*size
					break;
				case 17:
					libu.hspeed = (2.7 *(1-facing*2))*size;
					libu.vspeed = -1.83*size
					break;
				case 18:
					libu.hspeed = (2.8 *(1-facing*2))*size;
					libu.vspeed = -1.78*size
					break;
				case 19:
					libu.hspeed = (2.9 *(1-facing*2))*size;
					libu.vspeed = -1.75*size
					break;
				case 20:
					libu.hspeed = (3 *(1-facing*2))*size;
					libu.vspeed = -1.72*size
					break;
				case 21:
					libu.hspeed = (3.1 *(1-facing*2))*size;
					libu.vspeed = -1.69*size
					break;
				case 22:
					libu.hspeed = (3.2 *(1-facing*2))*size;
					libu.vspeed = -1.64*size
					break;
				case 23:
					libu.hspeed = (3.3 *(1-facing*2))*size;
					libu.vspeed = -1.59*size
					break;
				case 24:
					libu.hspeed = (3.4 *(1-facing*2))*size;
					libu.vspeed = -1.53*size
					break;
				case 25:
					libu.hspeed = (3.5 *(1-facing*2))*size;
					libu.vspeed = -1.46*size
					break;
				case 26:
					libu.hspeed = (3.55 *(1-facing*2))*size;
					libu.vspeed = -1.4*size
					break;
				case 27:
					libu.hspeed = (3.6 *(1-facing*2))*size;
					libu.vspeed = -1.33*size
					break;
				case 28:
					libu.hspeed = (3.68 *(1-facing*2))*size;
					libu.vspeed = -1.25*size
					break;
				case 29:
					libu.hspeed = (3.77 *(1-facing*2))*size;
					libu.vspeed = -1.18*size
					break;
				case 30:
					libu.hspeed = (3.86 *(1-facing*2))*size;
					libu.vspeed = -1.1*size
					break;
				case 31:
					libu.hspeed = (3.95 *(1-facing*2))*size;
					libu.vspeed = -1.05*size
					break;
			}
		}
		if timer=41
		{
			with(arc)
				{instance_destroy()}
		}
		if timer>41 && (!attacking && movedown && special && !moveup) || movejump
		{
			with(arc)
				{instance_destroy()}
			interrupt=1
		}
		if timer=65 || interrupt=1
			{cooldown_timer=100}
		
}

if abyssmoves=1 && cooldown_timer<5
{
	time=28
	if air=0
		{sprite_index = abyss_sideb_sprite}
	if air>0
		{sprite_index= abyss_sideb_air_sprite}
	
	switch(timer)
	{
		case 4: image_index=1; break
		case 8: image_index=2; break;
		case 12: image_index=3; break
		case 16: image_index=4; break;
		case 20: image_index=5; break;
		case 24: image_index=6; break;
	}
	
	if timer =8
		{sound_play(fair_sound)}
	
	if timer=12
	{
		star = create_projectile ( 1 , 45+90*facing , 1 , 0 , 7 , 2 , punch1 , obj_spark_hit2 , xsize , ysize , 16.15 , 13.30 , self.id , 240 , char_custom3 );
		if movedown
			{star.vspeed=1.3*size}
		if moveup
			{star.vspeed=-1.3*size}
		star.hspeed=(6*(1-facing*2))*size
		star.image_xscale=(0.8-facing*1.6)*size
		star.image_yscale=0.8*size
		star.sprite_index=spirit_star_sprite
		star.image_speed=0.3
		star.use_palette=number
	}
	if timer=26
		{cooldown_timer=120}
}
}

if smashori 
{
	time=28
	if air=0
		{sprite_index = abyss_sideb_sprite}
	if air>0
		{sprite_index= abyss_sideb_air_sprite}
	
	switch(timer)
	{
		case 4: image_index=1; break
		case 8: image_index=2; break;
		case 12: image_index=3; break
		case 16: image_index=4; break;
		case 20: image_index=5; break;
		case 24: image_index=6; break;
	}
	
	if timer =8
		{sound_play(fair_sound)}
	
	if timer=12
	{
		star = create_projectile ( 0.75 , 90 , 0.5 , 0 , 7 , 2 , slash2 , obj_spark_hit2 , xsize , ysize , 16.15 , 13.30 , self.id , 240 , char_custom4 );
		
		if ( analog_control )
		{
			var dis, dir;
			dis = point_distance ( 0 , 0 , holdx , holdy );
			dir = point_direction ( 0 , 0 , holdx , holdy );
			if ( dis > 0.5 )
			{
				var dd;
				dd = round ( dir / 45 ) * 45;
				star.image_angle=dir+10
			}
			if facing=0
			{
				if dir>=35 && dir <180
				{
					dir=35
					star.image_angle=35
				}
				if dir <=325 && dir>180
				{	
					dir=325
					star.image_angle=325
				}
			}
			if facing=1
			{
				if dir<=145 && dir >0
				{
					dir=145
					star.image_angle=145
				}
				if dir >=215 && dir<360
				{
					dir=215
					star.image_angle=215
				}
			}

		}
		else
		{
			if !movedown && !moveup
				{star.image_angle=(180*facing)+10-facing*20}
			if movedown && !moveup 
				{star.image_angle=(325-110*facing)+10-facing*20}
			if moveup && !movedown
				{star.image_angle=(35+110*facing)+10-facing*20}
		}
		star.speed=4*size
		if analog_control
			star.direction=dir
		else
			star.direction=star.image_angle-(10-facing*20)
		star.image_xscale=(0.8-facing*1.6)*size
		star.image_yscale=0.8*size
		star.sprite_index=spirit_star_sprite
		star.image_speed=0.5
		star.use_palette=number
	}
	if timer=26
		{cooldown_timer=120}

}
if ( timer >= time - 1 && state_type != "flinch" && state_type != "air_flinch" )
  {
  with(arc)
		{instance_destroy()}
  target=0
  attack_type = "none";
  state_type = "stand";
  timer = 0;
  }