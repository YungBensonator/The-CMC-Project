// Smash Ori form
if ( global.gs_form[number-1] = 0 )
{
	smashori=1
	rivalsori=0
}
if ( global.gs_form[number-1] = 1 )
{
	smashori=0
	rivalsori=1
	forceabyssmoves=0
}
if ( global.gs_form[number-1] = 2 )
{
	smashori=0
	rivalsori=1
	forceabyssmoves=1
	abyssmoves=1
}
//checks to see if a Light Burst projectile is active
if instance_exists(libu) && state_type!="attack" && state_type!="air_attack" && attack_type !="downb"
	expltemp=1
if expltemp=2 || expltemp=0
	{
		cooldown=30
	}
if cooldown>0
	cooldown-=1
if cooldown<=0 && expltemp=2
		expltemp=0
//Smash Ori, sounds, sprite animating, etc.
if smashori
{
	if lburst_cooldowntimer>0
		lburst_cooldowntimer-=1
	weight = 0.196;
    if state_type!="attack" && state_type!="air_attack"
		grav = 0.18;
    max_jumps=4;
    run_start_speed = 3
    run_accel = 1;
	walk_speed = 1.9;

    run_speed = 3.3;
    jump_speed = 3.8;
    mid_jump_speed = 4.9-air/1.2;
    short_hop_speed = 2.7;
    air_speed = 2.5;
    fall_speed = 4;
    air_accel = 0.26;
    fric = 1.2;

	if air=0 && state_type!="attack" && state_type!="air_attack"
	{
		cannotbash=0
		stalling=0
		hovertemp=1
		used_air=0
	}
	jump_sound=jump2_sound
	mid_jump_sound=choose(djump_sound,djump_sound1,djump_sound2,djump_sound3,djump_sound4)
	fly_voice1=choose(hurt1_voice,hurt2_voice,hurt3_voice,hurt4_voice,hurt5_voice)
	fly_voice2=choose(hurt1_voice,hurt2_voice,hurt3_voice,hurt4_voice,hurt5_voice)
	die_voice1=choose(death1_voice,death2_voice,death3_voice,death4_voice,death5_voice)
	die_voice2=choose(death1_voice,death2_voice,death3_voice,death4_voice,death5_voice)
	mid_jump_voice=choose(djump_voice,djump_voice1,djump_voice2,djump_voice3,djump_voice4,-1,-1,-1,-1)

	if (sprite_index == mid_jump_sprite)
	{	
		switch (timer)
		{
			case 0: image_index = 0; break
			case 3: image_index = 1; break
			case 6: image_index = 2; break
			case 9: image_index = 3; break
			case 12: image_index = 4; break
			case 15: image_index = 5; break
			case 18: image_index = 2; break
			case 21: image_index = 3; break
			case 24: image_index = 4; break
			case 27: image_index = 5; break
			case 30: image_index = 2; break
			case 33: image_index = 3; break
			case 34: image_index = 4; break
			case 37: image_index = 5; break
			case 40: image_index = 6; break
			case 43: image_index = 7; break
			case 46: sprite_index = jump_sprite; image_index = 2; break
			case 49: image_index = 3; break
			case 52: image_index = 4; break
		}
	}
}

//Sein stuff | Rivals Ori stuff
if rivalsori
{
if ( sein == 0  || ( sein > 0 && !instance_exists ( sein ) ) ) 
  {
  sein = instance_create ( x , y - 6 , obj_spark );
  sein.depth = depth + 1;
  sein.x = x-20*(1-facing*2)
  sein.y = y-30
  sein.image_xscale = xsize;
  sein.image_yscale = ysize;
  sein.number=-number
  sein.image_index = 0
  sein.ori=self.id
  }

	if (state_type != "attack" || state_type!="air_attack") && seintemp=0
	{  
		if sein.sprite_index != sein_idle_sprite
			sein.sprite_index = sein_idle_sprite;
		sein.visible=1
		sein.image_speed = 0.2;
	}  

	if walljumptemp=1 && state_type="fall" && (next_to_lwall || next_to_rwall) && movejump
	{
		walljumptemp=0
		interrupt=1
	}

	if instance_exists(sein) && visible
		sein.loop=99
	sein_timer += 1;

	if ( sein_timer >= 10 )
	{
	  
		visual_timer+=1
	  
		switch(visual_timer)
		{
			case 0: sein_yo = 4; break
			case 1: sein_yo = 6; break
			case 2: sein_yo = 8; break
			case 3: sein_yo = 10; break
			case 4: sein_yo = 12; break
			case 5: sein_yo = 10; break
			case 6: sein_yo = 8; break;
			case 7: sein_yo = 6; break;
			case 8: sein_yo = 4; break;
			case 9: sein_yo = 2; break;
		}
		sein_timer = 0;
	}
	if visual_timer>10
		visual_timer=-1
	  

	if state_type !="out"
	{
		sein.image_xscale = xsize*size;
		sein.image_yscale = ysize*size;

		if state_type!="attack" && state_type!="air_attack" && seintemp=1
			seintemp=0
		
		if target=0 && state_type!="attack" && state_type!="air_attack"
		{
			if !instance_exists(target_bubble)
				target_bubble = create_homing_bubble(4,4 ,x, y,self.id,4)
			//target_bubble.visible=1
			target_bubble.x = x 
			target_bubble.y = y
		}
		
		if attack_type != "downb" && seintemp=0
		{
			if distance_to_object(target)>90 && target!=self.id
				targettemp=1
			else
				targettemp=0
			with (sein)
			{
				if distance_to_object(ori.target) >85 
				{
					ori.target=0
					ori.variable1 =0
					x = ( x * 20 + ori.x - (15 * ( 1 - ori.facing * 2 ) )*ori.size ) / 21;
					y = ( y * 20 + ori.y - (20 + ori.sein_yo )*ori.size) / 21;
				}
				else
				{
					if (ori.target != ori) 
					{ 
						if !ori.targettemp
						{
							if ori.abyssmoves=0
							{
								ori.variable1=1
								with(ori)
								{
									if target!=self.id
									with(target)
									{
										afterimage = after_image(2,c_red,0.4)
										afterimage.image_xscale *=1.15
										afterimage.image_yscale *=1.15
										//afterimage.x=x-2*(1-facing*2)*size*xsize
										//afterimage.y=y+2*size*ysize
									}
								}
								x = (x * 20 + ori.x + ( (ori.target.x - ori.x)/2) * ori.size )/21
								y = (y * 20 + ori.y + ( ( (ori.target.y - ori.y)/2) + ori.sein_yo/2 - 20 ) * ori.size)/21
							}
							else
							{	
								x = ( x * 20 + ori.x - (15 * ( 1 - ori.facing * 2 ) )*ori.size ) / 21;
								y = ( y * 20 + ori.y - (20 + ori.sein_yo )*ori.size) / 21;
							}
						}
						else
						{	
							x = ( x * 20 + ori.x - (15 * ( 1 - ori.facing * 2 ) )*ori.size ) / 21;
							y = ( y * 20 + ori.y - (20 + ori.sein_yo )*ori.size) / 21;
						}
					}
				}
			}
		}
	  
	}

	if distance_to_object(sein) >25
		{sein_available=0}
	else
		{sein_available=1}
	if state_type="fall"
	{
		if moveup && upbcanceltemp=1
			{upbcanceltemp =2}
	}

	if upbcanceltemp =2
	{
		state_type="air_attack"
		attack_type="upb"
		timer=92
		time = 150	
		sprite_index = kuro_feather_sprite;
		upbcanceltemp=0
	}
}
//Animation shizer
if state_type="stand"
{
	if rivalsori
		can_walljump =1
	image_speed=0.2
}
if state_type="edge"
	{
		sprite_index=edge_sprite
		image_speed=0
		image_index=0
	}
if sprite_index = wall_cling_sprite
	{
		if rivalsori
		{
			if timer=1
				{air-=1}
			can_walljump=0
		}
		image_speed=0
		switch(timer)
		{
			case 6: image_index=1; break
			case 12: image_index=2; break;
			case 18: image_index=3;break;
		}
	}
//Spark destruction when not in the attack state
if state_type != "attack" && state_type != "air_attack"
{
	sound_stop(nair2_start)
	with(blaze)
		{instance_destroy()}
	with(usmash_aura)
		{instance_destroy()}
	with(sein_aura)
		{instance_destroy()}
	with(arc)
		{instance_destroy()}
	with(cross)
		{instance_destroy()}
	with(arrow)
		{instance_destroy()}
	with(sien)
		{instance_destroy()}
	with(blaze_instance)
		{instance_destroy()}
	with(blaze2_instance)
		{instance_destroy()}

}
	if fastfalltemp>0
		fastfalltemp-=1
//Sein meter
if rivalsori
{
	if (!instance_exists(MeterHud))
	{
		hud_x = obj_game_control.hud_x[other.number-1];
		hud_y = window_h-128+lengthdir_y(obj_game_control.hudp_shake[i]*0.8,obj_game_control.hudp_shake[i]*60);    
		MeterHud = instance_create ( hud_x, hud_y, obj_custom_gfx);
		MeterHud.draw_script = char_custom9;
		MeterHud.step_script = char_custom10;
		MeterHud.sprite_index=meter_sprite
		MeterHud.keepmain = self.keepmain;
		MeterHud.sein=sein_available
		MeterHud.owner = self.id;
		MeterHud.depth = -100
		MeterHud.image_speed = 0
	}
		MeterHud.hudalpha = obj_game_control.hud_cover[number-1];
	if state_type!="attack" && state_type!="air_attack"
	{
		if sein_available
			MeterHud.image_index=1
		else
			MeterHud.image_index=0
	}
	if (state_type="attack" || state_type="air_attack") && (attack_type="ssmash" || attack_type="dsmash" || attack_type="usmash")
	{
		if timer=1
		{
			if sein_available
				MeterHud.image_blend=make_color_rgb(160,255,255)	
			else
				MeterHud.image_blend=make_color_rgb(255,200,33)	
		}
	}
	else
		MeterHud.image_blend=c_white
}
	
//Cannot use Smash Ori's up B again after using it once
//Unless Ori hit something with a different attack prior.
if (air>0 && attack_type!="upb" && attack_type!="none" && attack_success) || air=0 || state_type="flinch" || state_type="air_flinch"
	no_launch=0
//Takes out the ability to use the Abyss Rune attacks (Rivals Ori) 
//11.11.2021 - unless the Rivals - Abyss form is selected
if state_type = "out"
{
	if rivalsori && forceabyssmoves!=1
		abyssmoves=0
}
//True gliding
/*if smashori
{
	if air=0
	{
		hoveranimtimer=0
		if soundtemp=1 
		{
			sound_play(feather_off)
			soundtemp=0
		}
		hovertemp=0
		movejump=0
		sprite_temp=0
	}
	if air>=1 && state_type="jump"
	{
		if holdjump
		{
			if vspeed>0
			{
				hovertemp=1
			}
		}
		else
		{
			if soundtemp=1
			{
				sound_play(feather_off)
				soundtemp=0
			}
				hovertemp=0
		}	
		if hovertemp=1 
		{
			
				soundtemp=1
			
			sprite_index=kuro_feather_sprite
			vspeed*=0.75
			image_speed=0.1
			hoveranimtimer+=1
		}
		if sprite_index=kuro_feather_sprite
		{
			if hoveranimtimer=1
				sound_play(feather_on)
			if hoveranimtimer<3 && hoveranimtimer>0
				image_index=17
			else if hoveranimtimer<7
				image_index=16
			if hoveranimtimer>=7 
			{
			
				if hoveranimtimer=31
					hoveranimtimer=7
				if (hspeed>2*size && facing=0) || (hspeed<-2*size && facing=1)
				{
					if hoveranimtimer mod 24 <6
						image_index=5
					else if hoveranimtimer mod 24 <12
						image_index=6
					else if hoveranimtimer mod 24 <18
						image_index=7
					else
						image_index=8
				}
				if (hspeed<=2*size && facing =0) || (hspeed>=-2*size && facing =1)
				{
					if hoveranimtimer mod 24 <6
						image_index=9
					else if hoveranimtimer mod 24 <12
						image_index=10
					else if hoveranimtimer mod 24 <18
						image_index=11
					else
						image_index=12
				}
			}

		}
		if hovertemp=0
		{

			hoveranimtimer=0
				if air=1
					sprite_index=jump_sprite
				if air=2 && timer <45
					sprite_index=mid_jump_sprite
			
		}
	}
}
*/

//Jump sprite animation
if sprite_index= jump_sprite && state_type="jump"
{
	image_speed=0
	switch(timer)
	{
		case 0: case 1: image_index=0; break
		case 9: image_index=1; break
		case 17: image_index=2; break
		case 26: image_index=3; break
		case 34: image_index=4; break
	}
}

if sprite_index=wall_jump_sprite
	{can_walljump=0}
	
//Airdodge animation
if ( sprite_index = air_dodge_sprite )
{
	upbcanceltemp=0
	if ( airdodge_type == 1 )
	{
		image_speed = 0;
		switch ( timer )
		{
			case 0: image_index = 0; break;
			case 3: image_index = 1; break;
			case 6: image_index = 2; break;
			case 9: image_index = 3; break;
			case 12: image_index = 4; break;
			case 15: image_index = 5; break;
		}
	}

	if ( airdodge_type == 3 )
		image_speed = 0.2;
	if ( airdodge_type == 0 )
	{
		image_speed = 0;
		switch ( timer )
		{
			case 0: image_index = 0; break;
			case 2: image_index = 1; break;
			case 4: image_index = 2; break;
			case 6: image_index = 3; break;
			case 8: image_index = 4; break;
			case 10: image_index = 5; break;
		}
	}
}

if sprite_index ==walk_sprite
	{image_speed=0.2}

if (state_type == "run") 
{
	//Dash
	if (runtimer >= 0 && runtimer < 50)
		{
			if runtimer<5
			{
				sprite_index = dash_start_sprite;
				if runtimer<2
					image_index=0
				else
					image_index=1
			}	
			if runtimer=5
			{
				image_index=0
				sprite_index=run_sprite
				image_speed=0.3
			}
		} 
	//Stop running during the initial dash
	else if (runtimer >= 60 && runtimer < 90 && dash_end == 1) 
	{
		sprite_index = dash_stop_sprite;
		if (runtimer < 62)
		{
			image_index = 0;
		} 
		else if (runtimer < 65)
		{
			image_index = 1;
		}
		else if runtimer <70
		{
			sprite_index=stand_sprite
			image_speed=0.3
		}
	} 
	//Stop running (run brake)
	else if (runtimer >= 60 && runtimer < 90 && dash_end == 0)
	{
		sprite_index = dash_stop_sprite;

		if (runtimer < 62)
		{
			image_index = 0;
		} 
		else if (runtimer < 65)
		{
			image_index = 1;
		}
		else if runtimer <70
		{
			sprite_index=stand_sprite
			image_speed=0.3
		}
	} 
	//Turn while running
	else if (runtimer >= -30 && runtimer <= -10) 
	{ 
		sprite_index = dash_turn_sprite;
		switch (runtimer){
			case -30: image_index = 0; break;
			case -27: image_index = 1; break;
			case -24: image_index = 2; break;
			case -21: image_index = 3; break;
		}
		if (runtimer >= -20){
			sprite_index = run_sprite;
			image_index=0
			image_speed = 0.3;
		}
	} 
	//Run normally
	else if (runtimer >= 50 && runtimer < 60)
	{
		sprite_index = run_sprite;
		image_speed = 0.3;
	} 
	
}

if sprite_index ==fall_sprite
	{image_speed=0.15}

//keeping the momentum from bash
if smashori
{
	//if no target was assigned during the Bash, the user is unable to use it once more
	//this returns the ability to be usable if Ori was on ground before next usage
	if air=0
		bashed=0
	
	if bashtemp=1
	{
		if (!moveleft && !moveright) && air>0
		{
			hspeed=keepspeed
		}
		if ((moveleft || moveright) || air=0 || state_type="out" )
		{
			if air=0
				hspeed*=0.25
			bashtemp=0
		}
	}
}
if state_type="jump" && (sprite_index=jump_sprite || sprite_index=mid_jump_sprite)
{
	imindex=image_index
}

//Trail
if smashori
{

	if !instance_exists(trail) && state_type != "entry" && state_type !="out"
		trail = create_trail(self.id,25,10*xsize*size,light_burst_trail_sprite)

	trail.depth = depth+1;
if state_type!="entry"
{
if sprite_index!=run_sprite && sprite_index!=jump_sprite && sprite_index!=mid_jump_sprite && sprite_index!=uair_spirit_edge_sprite && sprite_index!=fair_spirit_edge_sprite && sprite_index!=dair_spirit_smash_sprite && sprite_index!=kuro_feather_sprite && sprite_index!=dair_sprite && sprite_index !=bash_char_sprite && sprite_index !=fall_sprite && state_type!="entry" 
{
trail.x = x
trail.y = y-10*size;
}
if sprite_index=bash_char_sprite
{
trail.x = x+size*(3.8*(1-facing*2));
 trail.y = y-10*size;
}
if sprite_index=fall_sprite
{
trail.x = x+size*(3.8*(1-facing*2));
 trail.y = y-8*size;
}
if sprite_index=bash_char_sprite
{
trail.x = x+size*(-1*(1-facing*2));
 trail.y = y-10*size;
}
if sprite_index=run_sprite
{
trail.x = x+size*(3.8*(1-facing*2));
 trail.y = y-10*size;
}
if sprite_index=jump_sprite
{
trail.x = x
 trail.y = y-15.2*size;
}
if sprite_index=mid_jump_sprite
{
trail.x = x
if vspeed<1
 trail.y = y-18*size;
else
	trail.y = y-5*size
}
if sprite_index=dair_sprite
{
trail.x = x
 trail.y = y-11;
}
if sprite_index=uair_spirit_edge_sprite
{
trail.x = x+size*(5.7*(1-facing*2));
 trail.y = y-18*size;
}
if sprite_index=fair_spirit_edge_sprite
{
trail.x = x+size*(8.5*(1-facing*2));
 trail.y = y-10.5*size;
}
if sprite_index=dair_spirit_smash_sprite
{
trail.x = x
 trail.y = y-17.5*size;
}
if sprite_index=kuro_feather_sprite && state_type!="entry"
{
trail.x = x
 trail.y = y-15.2*size;
}
if state_type="out" && instance_exists(trail)
{
	with (trail)
		instance_destroy()
}
}
}
//keeping vspeed from Stomp
if returntemp >30 
	{
		if state_type="jump"
			vspeed = 6 * size;
		if (movejump && air<max_jumps-1) || air=0 || state_type!="jump"
			returntemp=0
	}
//dair spam prevention
if dair_counter >0
	{dair_counter-=1}

//Rivals recovery helpless into Feather

if attack_type="upb"
	{upbcanceltemp=1}

// Crouch animation
if (state_type = "crouch")
	{
		image_speed = 0;
		sprite_index = crouch_sprite;
		switch (timer)
		{
			case 0: image_index = 0; break;
			case 8: image_index = 1; break;
			case 16: image_index = 2; break;
			case 24: image_index = 3; break;
		}
		if timer =33
			{timer =7}
	}
//Cooldown for Light Burst and Spirit Star
if attack_type != "sideb" 
	{
		cooldown_timer-=1
		if (instance_exists(star) && cooldown_timer =1)
			{cooldown_timer=1}
		if cooldown_timer=0 && !instance_exists(star)
			{cooldown_timer=0}	
	}

// Cannot use Flash while it's active
if instance_exists(flash) && attack_type !="b" && special
	{bused=1}
if !instance_exists(flash) 
	{bused=0}

// Jump animation
if (sprite_index == jump_sprite)
	{	if timer = 0
			{image_index =0}
		image_speed = 0.1
		if image_index>4
			{image_index=4}
	}
	
//Double Jump animation for Rivals Ori
if rivalsori
{
	if (sprite_index == mid_jump_sprite)
	{	
		switch (timer)
		{
			case 0: image_index = 0; break
			case 4: image_index = 1; break
			case 8: image_index = 2; break
			case 12: image_index = 3; break
			case 16: image_index = 4; break
			case 20: image_index = 5; break
			case 24: image_index = 6; break
			case 28: image_index = 7; break
			case 32: sprite_index = jump_sprite; image_index = 2; break
			case 36: image_index = 3; break
			case 40: image_index = 4; break
		}
	}
}
