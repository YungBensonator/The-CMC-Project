if ( state_type = "jump" )
  {
    state_type = "air_attack";
    attack_type = "uair";
    timer = 0;
    time = 32;
    sprite_index = uair_sprite;
    image_speed = 0;
    image_index = 0;
    vspeed -= 0.1;
  }

if ( timer < time )
  {
// Animate VFX        
switch (timer){
        case 4:                         // sprite keyframe
                // We use the logic I determined looking at the sheet to create the blur.
                // Note that while he faces right, it rotates clockwise, so it is not counter-clockwise.
                blur = create_itmpnt_blur( /*Attacker*/ self.id, /*Texture*/ blur_texture, /*Start frame*/ 1, /*Apex Frame*/ 2, /*End frame*/ 5, /*CCW*/ 1, /*girth*/ 7, 30);
                
				
				
                blur.push_x = 3 * size * (1-facing*2);        // Push blur toward crash
                blur.push_y = -10 * size
				blur.image_index = 0;
                blur.h_squish = 7;        // Thin the blur out a bit
                blur.v_squish = 6
				//blur.depth = depth + 0.1;
                blur.index = 0.5;                // This will show the blur between the first and second frames. If this was 0, nothing would show at all.
                blur.depth = depth - 1
				break;
        case 6:
                blur.image_index = 0.75;
				blur.index = 0.75
                break;				
        case 8:
                blur.index = 1;
				blur.image_index = 1;
                break;
        case 10:                        // Sprite end frame
                blur.index = 2; // Set the blur index to match with crash's new sprite index.
                blur.image_index = 2;
                break;
		case 12:                        // Sprite end frame
                blur.index = 3; // Set the blur index to match with crash's new sprite index.
                break;
		case 14:                        // Sprite end frame
                blur.index = 4; // Set the blur index to match with crash's new sprite index.
                break;
        case 16:                         
                blur.index = 5;        // Set the blur index to match with crash's new sprite index.
                blur.image_index = 3;
                break;
        case 20:
                with (blur){
                        instance_destroy();
                }
                break;
}  
  
  

    switch ( timer )
      {
	case 4: image_index = 1; break;
	case 8: image_index = 2; break;
	case 12: image_index = 3; break;
	case 16: image_index = 4; break;
	case 20: image_index = 5; break;
	case 24: image_index = 6; break;
	case 28: image_index = 7; break;
      }
    if ( timer = 6 )
      {
	play_attack_voice();
	sound_play(attack_sound3);
	create_hitbox(12,45+facing*110,6.11,5,16,8,reimuhit1,obj_spark_hit3,0.85,0.7,abs(place_x(138)),-place_y(104),self.id,7,2);
	hitbox.hit_stun = 13;
	hitbox.kbg = (1.1+(target.percent*0.03)+(target.percent > 125))*size;
      }
    if ( timer = 8 )
      {
	hitbox.damage = 7*size;
	hitbox.sfx = reimuhit2;
	hitbox.bkb = 5.50*size;
	hitbox.kbg = (1.1+(target.percent*0.04)+(target.percent > 125))*size;
	hitbox.shield_damage = round(10*size);
	hitbox.hitlag_frames = round(6*size);
	hitbox.image_xscale = 0.8*size;
	hitbox.image_yscale = 0.7*size;
	hitbox.hitbox_x = place_x(115)
	hitbox.hitbox_y = -place_y(67)
      }
    if ( timer = 10 )
      {
	hitbox.dir = 140+facing*-100
	hitbox.bkb = 5.50*size;
	hitbox.kbg = (1.1+(target.percent*0.04)+(target.percent > 120))*size;
	hitbox.hitlag_frames = 7*size;
	hitbox.image_xscale = 1*size;
	hitbox.image_yscale = 0.7*size;
	hitbox.hitbox_x = place_x(101)
	hitbox.hitbox_y = -place_y(69)
      }
    if ( timer = 12 )
      {
	hitbox.damage = 7*size;
	hitbox.dir = 150-facing*140;
	hitbox.bkb = 5.20*size;
	hitbox.kbg = (1+(target.percent*0.03)+(target.percent > 120))*size;
	hitbox.gfx = obj_spark_hit1;
	hitbox.image_xscale = 0.9*size;
	hitbox.image_yscale = 0.85*size;
	hitbox.hitbox_x = place_x(68)
	hitbox.hitbox_y = -place_y(91)
        hitbox.hit_stun = 7;
      }
    if ( timer >= 25 )
	interrupt = 1;

    if ( air = 0 )
      {
  dontrepeat = 0;
  state_type = "land";
	attack_type = "none";
	timer = 0;
	time = 8;
	sprite_index = land_sprite;
      }
  }

if (timer > 11){
if (attack_success || target.object_index == obj_enemy) && (obj_score_control.stocks[target.number-1] == 1 && dontrepeat = 0){
				if ((target.weight <= .22 && target.percent > 130) || (target.weight > .22 && target.weight < .3 && target.percent > 140) || (target.weight > .3 && target.percent > 155)){
			        killspark = instance_create(target.x-200,target.y-170,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.65;
				killspark.image_yscale = size * 0.85;
	            killspark.image_xscale = size * 0.45;
				killspark.image_yscale = size * 0.65;
                killspark.image_xscale = size * 0.65;

				killspark.image_index = 0;
				killspark.image_speed = 0.045;
				killspark.alarm[0] = 80;
				killspark.depth = depth + 1;
				sound_play(killscreen_voice);
				screen_shake(30,30);
				freezer  = instance_create(target.x,target.y,obj_freeze)
				freezer2  = instance_create(x,y,obj_freeze)
				effect_create_above(ef_ellipse,target.x,target.y+10,1,c_black)
				freezer.alarm[0] = 78
				freezer2.alarm[0] = 80
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = target.x - 50;
				spark.camera_r = target.x + 50;
				spark.camera_u = target.y - 80;
				spark.camera_d = target.y;
				spark.camera_boundary_zoom = 20;
				spark.alarm[0] = 60;
				spark2 = instance_create(target.x+8*(1-facing*2),target.y-26,obj_spark_hit3)
				spark2.alarm[0] = 50
				dontrepeat = 1;
				}
				}
        
  }	   


if ( timer >= time - 1 )
  {
  dontrepeat = 0;  
  attack_type = "none";
  if ( air > 0 )
	{
    state_type = "jump";
	sprite_index = jump_sprite;
	image_index = 4;
	}
    else
    state_type = "stand";
  timer = 0;
  time = -1;
  }