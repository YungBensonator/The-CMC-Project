if state_type = "jump" {
        vspeed -= 0.1;
        state_type = "air_attack";
        attack_type = "uair";
        image_speed = 0;
        sprite_index = uair_sprite;
        image_index = 0;
        timer = 0;
        time = 44;
        timer_speed=1;
}
        if timer < time {
switch ( timer )
      {
	
	case 3: image_index = 1; break;
	case 6: image_index = 2; break;
	case 9: image_index = 3; break;
	case 11: image_index = 4; break;
	case 13: image_index = 5; break;
	case 15: image_index = 6; break;
	case 19: image_index = 7; break;
	case 22: image_index = 8; break;
	case 32: image_index = 9; break;
	case 34: image_index = 10; break;
	case 38: image_index = 11; break;
	case 41: image_index = 12; break;
	
	
	
      }
            state_type = "air_attack";
            if timer = 9 {
                sound_play(attack_sound1);
                sound_play(mid_jump_voice)
                create_hitbox(3,70+facing*40,5,0,5,8,kick2,obj_spark_hit2,1,0.5,0,24,self.id,3,2);
                hitbox.di = 0.5
                }
            if timer = 15 {
                sound_play(attack_sound1);
                sound_play(usmash_voice)
                create_hitbox(12,angle_correct(300),5.5,4.9,6,12,kick2,obj_spark_hit4,0.8,0.8,0,40,self.id,3,2);
		hitbox.hit_stun = 8
          hitbox.execute_on_hit = "
    if attacked.percent / attacked.weight >= 300{
    with (attacker){
        alarm[1] = 60
        shakeme = alarm[1] + 1;
        camerazoom = instance_create ( 0 , 0 , obj_camerazoom );
        camerazoom.camera_l = target.x - 10;
        camerazoom.camera_r = target.x + 10;
        camerazoom.camera_u = target.y - 40;
        camerazoom.camera_d = target.y + 0;
        camerazoom.camera_boundary_zoom = 15;
        camerazoom.alarm[0] = 60;
        killspark = instance_create(x,y,obj_spark);
        killspark.sprite_index = killspark_sprite;
	  killspark.image_xscale = (1280/600)*0.25;
	  killspark.image_yscale = (720/338)*0.3;
        killspark.image_index = 0;
        killspark.image_speed = 16/60;
        killspark.snap = -1
        killspark.alarm[0] = 60;
        killspark.depth = min(target.depth-1,depth-1);
        killspark.alpha_add = -0.02
        killspark.image_alpha = 1
        sound_play(killscreen_voice);
        screen_shake(30,30);
    }
    with (attacked){
        alarm[2] = 60
        shakeme = alarm[2] + 1;
    }
    
    }
    "
                }
        if air = 0 && timer < 34{
		
                state_type="land";
                sprite_index = ukemi_sprite;
                attack_type="none";
                timer=0;
                time=13;
image_speed=0.3
 }
    if air = 0 && timer > 34{
                state_type="land";
                sprite_index = land_sprite;
                attack_type="none";
                timer=0;
                time=13; }
        }
  if (timer >= 15){
if (attack_success || target.object_index == obj_enemy) && (dontrepeat = 0 && obj_score_control.stocks[target.number-1] == 1){
				if ((target.weight <= .22 && target.percent > 100) || (target.weight > .22 && target.weight < .3 && target.percent > 115) || (target.weight > .3 && target.percent > 130)){
			killspark = instance_create(enemy.x-200,enemy.y-250,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.75;
				killspark.image_yscale = size * 0.95;
				killspark.image_yscale = size * 0.95;
				killspark.image_index = 0;
				killspark.image_speed = 0.045;
				killspark.alarm[0] = 80;
				killspark.depth = depth + 2 ;
				sound_play(killscreen_voice);
				screen_shake(30,30);
				freezer  = instance_create(enemy.x,enemy.y,obj_freeze)
				effect_create_above(ef_ellipse,enemy.x,enemy.y+10,1,c_black)
				freezer.alarm[0] = 80
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = enemy.x - 30;
				spark.camera_r = enemy.x + 30;
				spark.camera_u = enemy.y - 50;
				spark.camera_d = enemy.y;
				spark.camera_boundary_zoom = 120;
				spark.alarm[0] = 50;
				spark2 = instance_create(enemy.x+8*(1-facing*2),enemy.y-26,obj_spark_hit3)
				spark2.alarm[0] = 50
				dontrepeat = 1;
				}
				}
        
  }


if timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" {
    dontrepeat = 0;
    attack_type = "none";
    if air > 0
        state_type = "jump";
    else
        state_type = "stand";
    timer = 0;
    time =-1;
    }
        
