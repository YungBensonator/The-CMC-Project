if ( state_type = "jump" )
  {
    state_type = "air_attack";
    attack_type = "fair";
    timer = 0;
    time = 45;
    sprite_index = fair_sprite;
    image_speed = 0;
    image_index = 0;
	create_hurtbox_precise(self.id,54,fair_mask)
  }

if ( timer < time )
  {
    switch ( timer )
      {
	case 6: sound_play(sword_sound1); image_index = 1; break;
	case 9: image_index = 2; break;
	case 15: image_index = 3; break;
	case 17: image_index = 4; break;
	case 19: image_index = 5; break;
	case 21: image_index = 6; break;
	case 32: image_index = 7; break;
	case 35: image_index = 8; break;
      }

    if ( timer = 15 )
      {
	sound_play(attack_sound1);
	sound_play(swingsnd2);
	sound_play(sword_sound4);
      }
    if ( timer = 15 )
      {
	create_hitbox(12,40+facing*100,4.2,7,15,7,slash3,obj_spark_slash4,0.73 , 0.70 , 19.50 , 63.00,self.id,5,2);
	hitbox.hit_stun = 4;
	create_hitbox2(13,40+facing*100,4.2,7,13,7,slash3,obj_spark_slash3,0.74 , 0.68 , 13.50 , 46.50,self.id,5,2);
	hitbox2.hit_stun = 4;
      }
    if ( timer = 17 )
      {
	hitbox.dir = 30+facing*120;
	hitbox.hitbox_x = size * (18-facing*36);
	hitbox.hitbox_y =-2.25*size;
	hitbox.image_xscale = 1.1*size;       
    hitbox.image_yscale = 1.1*size;
	//
	hitbox2.dir = 30+facing*120;
	hitbox2.hitbox_x = size * (23.25-facing*46.5);
	//hitbox2.hitbox_y = 27*size; old pos for hitbox 2
	hitbox2.image_xscale = 1.35*size;       
    hitbox2.image_yscale = 1*size;
	hitbox2.hitbox_y = 23*size;
      }

/*
//Size
hitbox.image_xscale = 0.55*size;       (change size length)
hitbox.image_yscale = 0.62*size;       (change size height)

//Pos
hitbox.hitbox_x = (-4+facing*8)*size;    Hitbox location X (Sideways) (used on moving hitbox)
hitbox.hitbox_y = 45*size;         Hitbox Height (Up/down location)

*/
    if ( air = 0 )
      {
	state_type = "land";
	attack_type = "none";
	timer = 0;
	time = 14;
	sprite_index = land_sprite;
      }
  }

        if (timer >= 15){
if (attack_success || target.object_index == obj_enemy) && (dontrepeat = 0 && obj_score_control.stocks[target.number-1] == 1){
				if ((target.weight <= .22 && target.percent > 135) || (target.weight > .22 && target.weight < .3 && target.percent > 145) || (target.weight > .3 && target.percent > 155)){
				                killspark = instance_create(target.x-200,target.y-170,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.65;
				killspark.image_yscale = size * 0.85;
	            killspark.image_xscale = size * 0.45;
				killspark.image_yscale = size * 0.65;
                killspark.image_xscale = size * 0.65;

				killspark.image_index = 0;
				killspark.image_speed = 0.045;
				killspark.alarm[0] = 80;
				killspark.depth = depth + 1;
				sound_play(killscreen_voice);
				screen_shake(30,30);
				freezer  = instance_create(target.x,target.y,obj_freeze)
				freezer2  = instance_create(x,y,obj_freeze)
				effect_create_above(ef_ellipse,target.x,target.y+10,1,c_black)
				freezer.alarm[0] = 78
				freezer2.alarm[0] = 80
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = target.x - 50;
				spark.camera_r = target.x + 50;
				spark.camera_u = target.y - 80;
				spark.camera_d = target.y;
				spark.camera_boundary_zoom = 20;
				spark.alarm[0] = 60;
				spark2 = instance_create(target.x+8*(1-facing*2),target.y-26,obj_spark_hit3)
				spark2.alarm[0] = 50
				dontrepeat = 1;
				}
				}
        
  }	   


if ( timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" )
  {
    dontrepeat = 0;
	state_type = "jump";
    attack_type = "none";
    timer = 0;
    time = -1;
  }