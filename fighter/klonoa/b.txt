if ( state_type == "run" || state_type == "stand" || state_type == "jump" || state_type == "crouch" )
  {
  attacking = 0;
  special = 0;
  attack_type = "b";
  time = 60;
  timer = 3;
  state_type = "air_attack";
  if ( air == 0 )
    hspeed = 0;
  sprite_index = b_launch_sprite;
  image_index = 0;
  image_speed = 0;
  timer_speed = 1;
  target = -1;
  whirlwind = 0;
  }
target.techlock = 1
  
if ( target > 0 )
  {
  if ( target.alarm[2] > 0 || target.alarm[1] > 0 || ( temp < 100 && point_distance ( target.x , target.y , x , y - 32 * size ) > 56 * size + speed + target.actual_width + target.actual_height ) )
    {
    if ( air > 0 )
      state_type = "jump";
      else
      state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    exit;
    }
  target.xprev = x;
  target.yprev = y;
  whirlwind += 1;
  if ( whirlwind >= 12 && temp < 10 )
    {
    whirlwind = 0;
    spark = instance_create ( target.x , target.y , obj_spark );
    spark.sprite_index = spr_ring;
    spark.image_xscale = target.actual_width / 20;
    spark.image_yscale = 0.12;
    spark.image_speed = 0;
    spark.vspeed = -(target.actual_height / 32);
    spark.alpha_add = -1/64;
    spark.alarm[0] = 32;
    spark.image_alpha = 0.5;
    spark.snap = self.id;
    spark.depth = target.depth - 2;
    }
  if ( air )
    air_move = 1;
    else
    air_move = 0;
  if ( target.team == team )
    {
    target.sprite_index = target.spot_dodge_sprite;
    if ( target.movejump )
      {
      target.state_type = "jump";
      target.timer_speed = 1;
      target.timer = 0;
      target.time = -1;
      target.movejump = 0;
      target.attack_type = "none";
      target.air = 1;
      if ( air > 0 )
        state_type = "jump";
        else
        state_type = "stand";
      attack_type = "none";
      timer = 0;
      time = -1;
      exit;
      }
    }
  switch ( timer )
    {
    case 1: image_index = 5; break;
    case 4: image_index = 6; break;
    }
  if ( timer < 8 )
    {
    target.x = ( x + target.x ) * 0.5;
    target.y = ( y - 32 * size + target.y ) * 0.5;
    exit;
    }
  if ( timer == 8 )
    {
    special = 0;
    if ( air == 0 )
      sprite_index = b_idle_sprite;
      else
      sprite_index = b_jump_sprite;
    image_speed = 0.25;
    temp = 0;
    }
  // throw
  if ( temp >= 10 && temp < 60 )
    {
    if ( air == 0 ) hspeed *= 0.8;
    sprite_index = b_throw_sprite;
    temp += 1;
    switch ( temp - 10 )
      {
      case 6: image_index = 1; break;
      case 8: image_index = 2; break;
      case 10: image_index = 3; break;
      case 14: image_index = 4; break;
      case 24: image_index = 5; break;
      }
    if ( temp < 18 )
      {
      target.timer = 0;
      target.alarm[0] = -1;
      target.alarm[1] = -1;
      target.alarm[2] = -1;
      target.x = ( target.x + x + 24 * ( 1 - facing * 2 ) * size ) * 0.5;
      target.y = ( target.y + y - 4 * size ) * 0.5;
      }
    if ( temp == 18 )
      {
      instance_create ( x - 3 * size * ( 1 - facing * 2 ) , y - 16 * size , obj_spark_effect );
      sound_play ( attack_voice2 );
      create_projectile ( 5 , 65 + facing * 50 , 6 , 6.5 , 45 , 10 , kick2 , obj_spark_hit2 , 1 , 1 , 0 , 0 , self.id , 30 , char_custom2 );
      proj.hit = 1;
      proj.hit_player[(target.number-1)*SLOTS_PER_FIGHTER+target.slot] = 1;
      proj.sp = 6;
      proj.dirr = facing * 180;
      proj.man = target;
      proj.anglerotate = -20 * ( 1 - facing * 2 );
      proj.angle = 0;
      target.state_type = "air_flinch";
      target.timer = 0;
      target.time = 12 + (target.percent * 0.18 );;
      target.alarm[0] = 12 + (target.percent * 0.18 );;
      target.timer_speed = 1;
      }
    if ( temp >= 41 )
      {
      if ( air > 0 )
        state_type = "jump";
        else
        state_type = "stand";
      timer = 0;
      time = -1;
      attack_type = "none";
      exit;
      }
    exit;
    }
  // bounce-off
  if ( temp >= 100 && temp < 160 )
    {
		time = 55;
    hspeed = 0;
    air_move = 0;
    vspeed = -grav * size;
    fast_fall = 0;
    fast_fall_temp = 0;
    sprite_index = b_bounce_sprite;
    image_speed = 0;
    temp += 1;
    switch ( temp - 100 )
      {
      case 3: image_index = 1; break;
      case 6: image_index = 2; break;
      case 9: image_index = 3; break;
      case 12: image_index = 4; break;
      }
    if ( temp < 112 )
      {
      if ( collision_line ( x , y , target.x , target.y , obj_platform , 1 , 1 ) )
        y = target.y;
      target.timer = 0;
      target.alarm[0] = -1;
      target.alarm[1] = -1;
      target.alarm[2] = -1;
      target.x = x;
      if ( target.y < y + target.actual_height * 0.8 )
        target.y += 5;
        else
        target.y = y + target.actual_height * 0.8;
      target.vspeed = 5;
      }
    if ( temp >= 112 )
      {
      instance_create ( x - 3 * size * ( 1 - facing * 2 ) , y - 16 * size , obj_spark_effect );
      sound_play ( wahoo_voice );
      create_projectile ( 5 , 65 + facing * 50 , 6 , 6.5 , 45 , 10 , kick2 , obj_spark_hit2 , 1 , 1 , 0 , 0 , self.id , 30 , char_custom2 );
      proj.hit = 1;
      proj.hit_player[(target.number-1)*SLOTS_PER_FIGHTER+target.slot] = 1;
      proj.sp = 4 + min ( 5 , target.percent * 0.03 );
      if ( target.team == team )
        {
        proj.sp = 3 + target.movedown * 3;
        }
      proj.dirr = 270;
      proj.man = target;
      proj.anglerotate = -20 * ( 1 - facing * 2 );
      proj.angle = 0;
      target.state_type = "air_flinch";
      target.timer = 0;
      target.time = 8 + (target.percent * 0.15 );
      target.alarm[0] = 8 + (target.percent * 0.15 );
      target.timer_speed = 1;
      sprite_index = jump_sprite;
      vspeed = -jump_speed * size;
      air = 1;
      state_type = "jump";
      timer = 0;
      time = -1;
      attack_type = "none";
      }
    exit;
    }
  // target auto update position
  target.x = x;
  target.y = y - 32 * size;
  // landing
  if ( temp > 0 && temp < 5 )
    {
    hspeed *= 0.5;
    temp -= 1;
    exit;
    }
  // landing
  if ( air == 0 && sprite_index == b_jump_sprite && vspeed >= 0 )
    {
    temp = 4;
    sprite_index = b_land_sprite;
    duster = instance_create ( x + 3 * size , y + 1 , obj_dust_effect );
    duster.image_xscale *= 0.6 * size;
    duster.image_yscale *= 0.6 * size;
    duster.facing = 0;
    duster = instance_create ( x - 3 * size , y + 1 , obj_dust_effect );
    duster.image_xscale *= 0.6 * size;
    duster.image_yscale *= 0.6 * size;
    duster.facing = 1;
    exit;
    }
  if ( special || ai )
    {
    target.timer = 0;
    target.time = 40;
    temp = 10;
    sprite_index = b_throw_sprite;
    image_index = 0;
    image_speed = 0;
    exit;
    }
  if ( air == 0 )
    {
    image_speed = 0.25;
    if ( movejump )
      {
      movejump = 0;
      y -= 2;
      vspeed = -jump_speed * size;
      sound_play ( jump_sound );
      sprite_index = b_jump_sprite;
      exit;
      }
    if ( moveright )
      {
      gfx_try_splash ( x , y , 0.2 , 0.35 , 6 );
      if ( temp == 0 || temp == -2 )
        {
        duster = instance_create ( x , y + 1 , obj_dust_effect );
        duster.image_xscale *= size * 0.7;
        duster.image_yscale *= size * 0.7;
        duster.facing = 0;
        temp = -1;
        }
      facing = 0;
      sprite_index = b_run_sprite;
      hspeed = ( run_speed + walk_speed ) * 0.5 * size;
      }
      else
    if ( moveleft )
      {
      gfx_try_splash ( x , y , 0.2 , 0.35 , 6 );
      if ( temp == 0 || temp == -1 )
        {
        duster = instance_create ( x , y + 1 , obj_dust_effect );
        duster.image_xscale *= size * 0.7;
        duster.image_yscale *= size * 0.7;
        duster.facing = 1;
        temp = -2;
        }
      facing = 1;
      sprite_index = b_run_sprite;
      hspeed = -( run_speed + walk_speed ) * 0.5 * size;
      }
      else
      {
      temp = 0;
      sprite_index = b_idle_sprite;
      hspeed *= 0.85;
      }
    }
    else
    {
    //air_move = 1;
    if ( movejump )
      {
      temp = 100;
      exit;
      }
    sprite_index = b_jump_sprite;
    if ( moveright )
      {
      facing = 0;
      //if ( hspeed < air_speed * size )
      //  hspeed += air_accel * size;
      }
      else
    if ( moveleft )
      {
      facing = 1;
      //if ( hspeed > -air_speed * size )
      //  hspeed -= air_accel * size;
      }
      //else
      //hspeed *= 0.96;
    //if ( hspeed < -air_speed * size ) hspeed += air_accel * size;
    //if ( hspeed > air_speed * size ) hspeed -= air_accel * size;
    image_speed = 0;
    if ( vspeed < -size )
      image_index = 0;
      else
    if ( image_index < 4 )
      image_index += 0.5;
    }
  exit;
  }
  
switch ( timer )
  {
  case 3: image_index = 1; break;
  case 6: image_index = 2; break;
  case 9: image_index = 3; break;
  case 12: image_index = 4; break;
  case 40: image_index = 3; break;
  case 44: image_index = 2; break;
  case 48: image_index = 1; break;
  case 52: image_index = 0; break;
  }
  
if ( timer == 12 )
  {
  sound_play ( windbullet1_sound );
  spark = instance_create ( x + 14 * size * ( 1 - facing * 2 ) , y - 17 * size , obj_spark_shockwave );
  spark.image_xscale *= 0.3;
  spark.image_yscale *= 0.8;
  spark.image_blend = c_lime;
  spark.depth = -8;
  spark = instance_create ( x + 16 * size * ( 1 - facing * 2 ) , y - 17 * size , obj_spark );
  spark.sprite_index = b_bullet_sprite;
  spark.image_xscale = 0.5;
  spark.image_yscale = 0.5;
  spark.image_index = 0;
  spark.image_speed = 0;
  spark.image_blend = c_lime;
  spark.script = gfx_sweat_scr;
  spark.snap = self.id;
  spark = instance_create ( x + 16 * size * ( 1 - facing * 2 ) , y - 17 * size , obj_spark );
  spark.sprite_index = b_bullet_sprite;
  spark.image_xscale = 0.5;
  spark.image_yscale = 0.5;
  spark.image_index = 0;
  spark.image_speed = 0;
  shakex = -1 + facing * 2;
  }
if ( timer == 13 )
  {
  shakex = -2 + facing * 4;
  }
if ( timer == 14 )
  {
  shakex = -1 + facing * 2;
  }
if ( timer == 15 )
  {
  shakex = 0;
  }
if ( timer >= 12 && timer < 22 )
  {
  with ( spark )
    {
    after_image ( 5 , c_lime , .4 );
    after.hspeed = other.hspeed + lengthdir_x ( 4 * other.size , ( other.timer - 12 ) * 18 ) * ( 1 - other.facing * 2 );
    after.vspeed = other.vspeed;
    }
  spark.x = x + 16 * size * ( 1 - facing * 2 ) - lengthdir_y ( 22 * size , ( timer - 12 ) * 18 ) * ( 1 - facing * 2 );
  spark.y = y - 17 * size;
  spark.alarm[0] = 2;
  var a;
  a = collision_circle ( spark.x , spark.y , 10 , player , 0 , 1 );
  if ( a > 0 )
    {
    if ( a.intangible == 0 && a.status_cancel == 0 && a.armor_frames <= 0 )
      {
      temp = 0;
      sound_play ( windbullet2_sound );
      duster = instance_create ( spark.x , spark.y , obj_spark );
      duster.sprite_index = b_bullet_sprite;
      duster.image_xscale = 0.5;
      duster.image_yscale = 0.5;
      duster.image_index = 0;
      duster.image_speed = 0;
      duster.image_blend = c_lime;
      duster.snap = self.id;
      duster.script = gfx_sweat_scr; 
      intangible = 1;
      intangible_frames = 6;
      a.state_type = "grabbed";
      a.attack_type = "none";
      a.techlock = 1;
      a.timer = 0;
      a.time = 300;
      a.timer_speed = 1;
      a.alarm[1] = -1;
      a.alarm[2] = -1;
      a.attacker = self.id;
      timer = 0;
      if ( a.team == team )
        {
        a.sprite_index = a.spot_dodge_sprite;
        a.time = 300;
        }
        else
        {
        a.sprite_index = a.tumble_sprite;
        a.time = min ( 300 , ceil ( 40 + a.percent / ( a.weight * 10 ) ) );
        }
      time = a.time;
      a.ignore_physics = 6;
      target = a;
      exit;
      }
    }
  }
if ( timer == 22 )
  {
  spark = instance_create ( x + 16 * size * ( 1 - facing * 2 ) , y - 17 * size , obj_spark );
  spark.sprite_index = b_bullet_sprite;
  spark.image_xscale = 0.5;
  spark.image_yscale = 0.5;
  spark.image_index = 0;
  spark.image_speed = 0;
  spark.image_blend = c_lime;
  spark.snap = self.id;
  spark.script = gfx_sweat_scr; 
  }

if ( timer >= time - 1 )
  {
  attack_type = "none";
  if ( air == 0 )
    state_type = "stand";
    else
    state_type = "jump";
  timer = 0;
  time = -1;
  }