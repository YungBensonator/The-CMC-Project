//PART 1 - START OF SETUP PART OF THE MOVE
if ( state_type = "stand" || state_type = "run" )
  {
    state_type = "attack";
    attack_type = "jab"
    timer = 0;
    time = 16;
	if jabcancel = 0
	{
    sprite_index = jab_sprite;
    image_speed = 0;
    image_index = 0;
    hspeed = 0;
	}
	
	if jabcancel = 1
	{
	sprite_index = jab_sprite2;
	image_index = 0;
    timer = 40;
    time = 76;
	attacking = 0;
	}
	
	
  }
//PART 1 - END OF SETUP PART OF THE MOVE

//PART 2 - THE JUICE OF THE MOVE - START
if ( timer < time )
  {
  state_type = "attack";
    switch ( timer )
      {
	case 1: image_index = 1; break;
	case 2: image_index = 2; sound_play(attacksnd1); break;
	case 3: image_index = 3; break;
	case 5: image_index = 4; break;
	case 7: image_index = 5; break;
	case 10: image_index = 6; break;
	case 13: image_index = 7; break;
      }
	
	if timer = 3
	{
    create_hitbox ( 5 , angle_correct(20) , 3 , 0 , 25 , 5 , arcueid_hit1 , obj_spark_hit2 , 0.78 , 0.43 , 13.60 , 28.40 , self.id , 4 , 2 );
    hitbox.image_angle = ( 1 - facing * 2 ) * 0;
	hitbox.di = 0;
	
	if (random(2) > 1)
	{
	sound_play(choose(attack_voice1,attack_voice2));
	}
	
    jabfx = create_blur(x,y,self.id);
    jabfx.sprite_index = jab_fx;
    jabfx.image_index = 0;
    jabfx.image_speed = 0;
	jabfx.snap = self.id;
    jabfx.image_xscale = 0.4 * (1-facing*2) * size;
    jabfx.image_yscale = 0.4 * size;
    jabfx.x = x + place_x(85);
	jabfx.y = y + place_y(30);
    jabfx.depth = depth - 1;
	} 


switch ( timer )
      {
	case 4: jabfx.image_index = 1; break;
	case 5: jabfx.image_index = 2; break;
	case 6: jabfx.image_index = 3; break;
	case 7: jabfx.image_index = 4; break;
	case 8: jabfx.image_index = 5; break;
	case 9: jabfx.image_index = 6; break;
	case 10: jabfx.image_index = 7; break;
	case 11: jabfx.image_index = 8; break;
	case 12: jabfx.image_index = 9; break;
	}

if timer = 13
{
with (jabfx) {instance_destroy();}
}  
	
	if (timer >= 4 and timer < 13) and attack_success and ai
	attacking = 1
	
	if (timer >= 4 and timer < 13) and attacking and ((facing and moveleft) or (!facing and moveright)) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_stilt();
	stiltcancel = 0
with (jabfx) {instance_destroy();}
	}
	
	if ((timer >= 4 and timer < 13)) and attacking and moveup and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
	hspeed=2.8*(1-facing*2);
    char_utilt();
with (jabfx) {instance_destroy();}
	}
	
	if (timer >= 4 and timer < 13) and attacking and movedown and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
	dtiltcancel = 1
    char_dtilt();
with (jabfx) {instance_destroy();}
	}
	
	if (timer >= 4 and timer < 13) and attacking
	{
	sprite_index = jab_sprite2;
	image_index = 0;
    timer = 40;
    time = 76;
	attacking = 0;
with (jabfx) {instance_destroy();}
	}
	
	if (timer >= 4 and timer < 13) and ((facing and smashleft) or (!facing and smashright)) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_ssmash();
with (jabfx) {instance_destroy();}
	}
	
	if (timer >= 4 and timer < 13) and smashdown and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_dsmash();
with (jabfx) {instance_destroy();}
	}
	
	if (timer >= 4 and timer < 13) and smashup and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_usmash();
with (jabfx) {instance_destroy();}
	}
	
	if (timer >= 4 and timer < 13) and (special and moveup) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_upb();
with (jabfx) {instance_destroy();}
	}
	
	if (timer >= 4 and timer < 13) and (special) and !moveleft and !moveright and !moveup and !movedown and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_b();
with (jabfx) {instance_destroy();}
	}
	
	if (timer >= 4 and timer < 13) and (special and ((facing and moveleft) or (!facing and moveright))) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_sideb();
with (jabfx) {instance_destroy();}
	}
	
	if (timer >= 4 and timer < 13) and (special and movedown) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_downb();
with (jabfx) {instance_destroy();}
	}
	  
	  switch ( timer )
      {
	case 42: image_index = 1; break;
	case 43: image_index = 2; break;
	case 44: image_index = 3; break;
	case 46: image_index = 4; break;
	case 48: image_index = 5; break;
	case 49: image_index = 6; sound_play(attacksnd2); break;
	case 50: image_index = 7; break;
	case 51: image_index = 8; break;
	case 53: image_index = 9; break;
	case 55: image_index = 10; break;
	case 57: image_index = 11; break;
	case 59: image_index = 12; break;
	case 61: image_index = 13; break;
	case 63: image_index = 14; break;
	case 65: image_index = 15; break;
	case 67: image_index = 16; break;
	case 69: image_index = 17; break;
	case 71: image_index = 18; break;
      }
	 
    if timer = 46
{
hspeed = 4 * (1-facing*2) * size;
	duster = instance_create(x,y,obj_dust_effect);
    duster.image_xscale *= 0.4*size;
    duster.image_yscale *= 0.3*size;
    duster.facing = facing;
}	

if timer = 48
{
    jabfx2 = create_blur(x,y,self.id);
    jabfx2.sprite_index = jab_fx2;
    jabfx2.image_index = 0;
    jabfx2.image_speed = 0;
	jabfx2.snap = self.id;
    jabfx2.image_xscale = 0.4 * (1-facing*2) * size;
    jabfx2.image_yscale = 0.4 * size;
    jabfx2.x = x + place_x(73);
	jabfx2.y = y + place_y(65);
    jabfx2.depth = depth - 1;
	
hspeed = 0;
}

if timer = 49
{
	
	if (random(2) > 1)
	{
	sound_play(choose(attack_voice3,attack_voice4,attack_voice5));
	}
}

if timer = 50
{
    create_hitbox ( 5 , angle_correct(20) , 3 , 1 , 12 , 4 , arcueid_hit2 , obj_spark_hit3 , 1.4 , 1 , 20 , 24.40 , self.id , 3 , 3 );
    hitbox.image_angle = ( 1 - facing * 2 ) * 310.76;
	hitbox.hit_stun = 6;
}


switch ( timer )
      {
	case 49: jabfx2.image_index = 1; break;
	case 50: jabfx2.image_index = 2; break;
	case 51: jabfx2.image_index = 3; break;
	case 52: jabfx2.image_index = 4; break;
	case 53: jabfx2.image_index = 5; break;
	case 54: jabfx2.image_index = 6; break;
	case 55: jabfx2.image_index = 7; break;
	case 56: jabfx2.image_index = 8; break;
	case 57: jabfx2.image_index = 9; break;
	case 58: jabfx2.image_index = 10; break;
	case 59: jabfx2.image_index = 11; break;
	case 60: jabfx2.image_index = 12; break;
	case 61: jabfx2.image_index = 13; break;
	case 62: jabfx2.image_index = 14; break;
	}

if timer = 63
{
with (jabfx2) {instance_destroy();}
}  

if (timer >= 50 and timer < 58) and attacking and ((facing and moveleft) or (!facing and moveright)) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
	stiltcancel = 1
    char_stilt();
with (jabfx2) {instance_destroy();}
	}
	
	if ((timer >= 50 and timer < 58)) and attacking and moveup and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
	hspeed=3*(1-facing*2);
    char_utilt();
with (jabfx2) {instance_destroy();}
	}
	
	if (timer >= 50 and timer < 58) and attacking and movedown and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
	dtiltcancel = 2
    char_dtilt();
with (jabfx2) {instance_destroy();}
	}
	
	if (timer >= 50 and timer < 58) and ((facing and smashleft) or (!facing and smashright)) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_ssmash();
with (jabfx2) {instance_destroy();}
	}
	
	if (timer >= 50 and timer < 58) and smashdown and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_dsmash();
with (jabfx2) {instance_destroy();}
	}
	
	if (timer >= 50 and timer < 58) and smashup and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_usmash();
with (jabfx2) {instance_destroy();}
	}
	
	if (timer >= 50 and timer < 58) and (special and moveup) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_upb();
with (jabfx2) {instance_destroy();}
	}
	
	if (timer >= 50 and timer < 58) and (special) and !moveleft and !moveright and !moveup and !movedown and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_b();
with (jabfx2) {instance_destroy();}
	}
	
	if (timer >= 50 and timer < 58) and (special and ((facing and moveleft) or (!facing and moveright))) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_sideb();
with (jabfx2) {instance_destroy();}
	}
	
	if (timer >= 50 and timer < 58) and (special and movedown) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_downb();
with (jabfx2) {instance_destroy();}
	}
    
  }
//PART 2 - THE JUICE OF THE MOVE - END

//PART 3 - GETTING OUT OF THE MOVE AND GOING BACK TO IDLE - START
if ( timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" )
  {
    jabcancel = 0;
    state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
  }
//PART 3 - GETTING OUT OF THE MOVE AND GOING BACK TO IDLE - END