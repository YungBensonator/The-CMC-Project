fast_fall = 0
fast_fall_temp = 0
if state_type = "jump" || state_type = "run" || state_type = "stand" || state_type = "crouch" {
        state_type = "air_attack"
        attack_type = "downb"
        image_speed = 0
        sprite_index = downb_sprite
        image_index=0
        timer = 0
        time = 50
		hspeed = 0
		air_move = 0;
		has_hit = 0;
		sound_play(downb_voice);
}
if ( timer < time )
    {
    
	 switch (timer) 
	 {
	 case 2: image_index = 1; break;
	 case 4: image_index = 2; break;
	 case 10: image_index = 3; sound_play(attacksnd3); sound_play(dash_sound); break;
	 case 11: image_index = 4; break;
	 case 12: image_index = 5; break;
	 case 15: image_index = 6; break;
	 case 23: sprite_index = dash_attack_sprite2; image_index = 0; break;
	 case 24: image_index = 1; break;
	 case 25: image_index = 2; break;
	 case 27: image_index = 3; break;
	 case 29: image_index = 4; break;
	 case 31: image_index = 5; break;
	 case 33: image_index = 6; break;
	 case 35: image_index = 7; break;
	 case 37: image_index = 8; break;
	 case 39: image_index = 9; break;
	 }

if timer = 10
{

    create_hitbox ( 6 , angle_correct(13) , 3.6 , 0 , 12 , 4 , arcueid_hit1 , obj_spark_hit3 , 0.72 , 1.06 , 8 , 20 , self.id , 8 , 2 );
    hitbox.image_angle = ( 1 - facing * 2 ) * 0;
	hitbox.di = 0.2;
	hitbox.weight_kb = 1;
	hitbox.sdi = 0;
	duster = instance_create(x,y,obj_dust_effect);
    duster.image_xscale *= 0.55*size;
    duster.image_yscale *= 0.5*size;
    duster.facing = facing;
}

if timer = 11
{
hspeed = 6 * (1-facing*2) * size;
}	

if timer >= 11 and timer < 25
{


if ( timer mod 3 < 1 )
{
duster = instance_create(x + 5 * (1-facing*2) * size , y , obj_dust_effect);
duster.image_alpha = 0.75;
duster.image_xscale *= 0.45 * (1-facing*2) * size;
duster.image_yscale *= 0.40 * size;
}

if facing = 0 && hspeed > 0 {
		hspeed -= 0.35;
		}
	if facing = 1 && hspeed < 0 {
		hspeed += 0.35;
		}
}

if timer >= 11 and timer < 23 and attack_success
{
target1 = target;
target1.speed = 0;
target1.gravity_lock = 2;
target1.ignore_physics = 1;
prevx = target1.x;
prevy = target1.y;
timer = 100;
time = 144;
image_index = 6;
}

switch (timer) 
	 {
	 case 101: sprite_index = dab_sprite; image_index = 0; break;
	 case 102: sprite_index = dab_vanish_sprite; image_index = 0; sound_play(dash_sound); break;
	 case 112: sprite_index = dab_sprite; image_index = 1; break;
	 case 113: image_index = 2; break;
	 case 115: image_index = 3; break;
	 case 118: image_index = 4; break;
	 case 121: image_index = 5; sound_play(swingsnd2); break;
	 case 122: image_index = 6; break;
	 case 123: image_index = 7; break;
	 case 126: image_index = 8; break;
	 case 130: image_index = 9; break;
	 case 134: image_index = 10; break;
	 case 138: image_index = 11; break;
	 }

if timer > 100 and timer < 122
{
vspeed = 0;
target1.time = 510;
target1.timer = 0;
target1.sprite_index=target1.flinch_sprite
target1.state_type = "flinch"
target1.speed = 0;
target1.gravity_lock = 1;
target1.ignore_physics = 1;
target1.x = prevx;
target1.y = prevy;
}

if timer >= 100
{
gravity = 0;
gravity_lock = 1;
}

if timer = 102
{
hspeed = 5 * (1-facing*2) * size; 
}

if timer = 110
{
hspeed = 0;
}

if timer = 113
{
facing = 1-facing;
}

if timer >= 102 and timer < 112
{
image_alpha = 0.45; 
image_blend = merge_color ( c_white , c_white , 1.5 );
alarm[7] = 7;
}

if timer = 112
{
image_alpha = 1; 
}

if timer >= 100 and timer < 200
{
vspeed = 0;
}

if timer = 122
{
    create_hitbox ( 4 , angle_correct(65) , 7.4 , 0 , 36 , 3 , arcueid_hit2 , obj_spark_hit3 , 1.16 , 1.52 , 22 , 24.40 , self.id , 3 , 4 );
	hitbox.hit_stun = 30;
	hitbox.weight_kb = 1;
	hitbox.di = 0;
	hitbox.sdi = 0;
}

if timer = 142
{
timer = 200
time = 245
sprite_index = dab_sprite2; 
image_index = 0;
}

switch (timer) 
	 {
	 case 202: sprite_index = dab_vanish_sprite2; image_index = 0; sound_play(dash_sound); break;
	 case 212: sprite_index = dab_sprite2; image_index = 1; break;
	 case 213: image_index = 2; break;
	 case 216: image_index = 3; break;
	 case 219: image_index = 4; break;
	 case 220: image_index = 5; break;
	 case 223: image_index = 6; break;
	 case 226: image_index = 7; break;
	 case 230: image_index = 8; break;
	 case 234: image_index = 9; break;
	 case 237: image_index = 10; break;
	 case 240: image_index = 11; break;
	 }

if timer = 202
{
speed = 9.6 * size; 
direction = point_direction(x,y,target1.x,target1.y-target1.actual_height) - 20 * (1-facing*2) * size;
}

if timer >= 212 and timer < 300
{
speed = 0;
}

if timer >= 202 and timer < 212
{
image_alpha = 0.45; 
image_blend = merge_color ( c_white , c_white , 1.5 );
alarm[7] = 7;
}

if timer = 212
{
image_alpha = 1; 
}

if timer = 213
{
facing = 1-facing;
}

if timer = 219
{
    sound_play(swingsnd3); 
    create_hitbox ( 4 , angle_correct(65) , 8 , 0 , 36 , 3 , arcueid_hit2 , obj_spark_hit3 , 1.23 , 1.58 , 11.60 , 21.20 , self.id , time , priority );
	hitbox.hit_stun = 36;
	hitbox.weight_kb = 1;
	hitbox.di = 0;
	hitbox.sdi = 0;
	hitbox.execute_on_hit = "attacker.has_hit = 1"
}

if has_hit = 1 and timer >= 219 and timer < 313
{
target1.direction = angle_correct(65);
}

if timer = 243
{
timer = 300
time = 354
sprite_index = dab_sprite3; 
image_index = 0;
}

switch (timer) 
	 {
	 case 302: image_index = 1; break;
	 case 312: image_index = 1; break;
	 case 313: image_index = 2; break;
	 case 315: image_index = 3; break;
	 case 318: image_index = 4; break;
	 case 321: image_index = 5; break;
	 case 322: image_index = 6; break;
	 case 325: image_index = 7; break;
	 case 329: image_index = 8; break;
	 case 333: image_index = 9; break;
	 case 337: image_index = 10; break;
	 case 341: image_index = 11; break;
	 case 345: image_index = 12; break;
	 case 348: image_index = 13; break;
	 case 351: image_index = 14; break;
	 }

if timer = 302
{
sound_play(dash_sound); 
speed = 9.75 * size; 
direction = point_direction(x,y,target1.x,target1.y-target1.actual_height) - 10 * (1-facing*2) * size;
}

if timer >= 312
{
speed = 0;
}

if timer >= 302 and timer < 312
{
image_alpha = 0.45; 
image_blend = merge_color ( c_white , c_white , 1.5 );
alarm[7] = 7;
}

if timer = 312
{
image_alpha = 1;
}

if timer = 313
{
facing = 1-facing;
}

if timer = 321
{
    sound_play(swingsnd3);
    create_hitbox ( 5 , angle_correct(285) , 6.5 , 7.8 , 40 , 12 , arcueid_hit3 , obj_spark_hit4 , 1.23 , 1.58 , 11.60 , 21.20 , self.id , 5 , 4 );
    hitbox.image_angle = ( 1 - facing * 2 ) * 0;
}


if timer = 320
{
    dabfx = create_blur(x,y,self.id);
    dabfx.sprite_index = dab_fx;
    dabfx.image_index = 0;
    dabfx.image_speed = 0;
	dabfx.snap = self.id;
    dabfx.image_xscale = 0.4 * (1-facing*2) * size;
    dabfx.image_yscale = 0.4 * size;
    dabfx.x = x + place_x(67);
	dabfx.y = y + place_y(41);
    dabfx.depth = depth - 1;
}

switch ( timer )
      {
	case 321: dabfx.image_index = 1; break;
	case 322: dabfx.image_index = 2; break;
	case 323: dabfx.image_index = 3; break;
	case 324: dabfx.image_index = 4; break;
	case 325: dabfx.image_index = 5; break;
	case 326: dabfx.image_index = 6; break;
	case 327: dabfx.image_index = 7; break;
	}

if timer = 328
{
with (dabfx) {instance_destroy();}
}  

}
if timer >= time-2 && state_type != "flinch" && state_type != "air_flinch" {
    attack_type = "none";
    if air > 0
        state_type = "jump";
    else
        state_type = "stand";
    timer = 0;
    time =-1;
}
        
