if state_type = "edge" {

        hspeed = 0;
        state_type = "attack";
        attack_type = "edge_attack";
        image_speed = 0;
        sprite_index = edge_sprite;
		timer = 0;
        time = 33;
        timer_speed=1;

}

if ( image_index < 2 )
  please_shadow = -1;

if timer < time {

    //This handles the "climb" movement itself before the roll/attack/jump portion of the script starts. You can mostly leave this alone unless you want to improve it. Or remove if you use an actual edge climb animation.
switch ( timer )
	{
	case 4: shakex=-8*size*(1-facing*2); shakey=15*size; break;
	case 6: shakey=12*size; break;
	case 8: shakex=-6*size*(1-facing*2); shakey=8*size; break;
	case 10: shakex=-4*size*(1-facing*2); shakey=4*size; break;
	case 12: shakex=0*size*(1-facing*2); shakey=0*size; break;
	case 14: shakex=0*size*(1-facing*2); shakey=0*size; break;
	}

//The animation portion.
switch ( timer )
	{
	case 4: sprite_index = jump_sprite; image_index=0; break;
	case 14: sprite_index = crouch_sprite; image_index=0; break;
	}
	
if timer = 15
{
timer = 100;
time = 130;
sprite_index = dsmash_sprite;
image_index = 0;
}	
	
//The attack itself. Note that if you are adjusting the animation from an existing one, you have to increase the number of frames to the time already accounted for the getup portion.


    switch ( timer )
      {
	case 102: image_index = 1; break;
	case 104: image_index = 2; intangible = 0; break;
	case 106: image_index = 3; break;
	case 108: image_index = 4; sound_play(swingsnd3); break;
	case 109: image_index = 5; break;
	case 110: image_index = 6; break;
	case 112: image_index = 7; break;
	case 114: image_index = 8; break;
	case 116: image_index = 9; break;
	case 118: image_index = 10; break;
	case 120: image_index = 11; break;
	case 122: image_index = 12; break;
	case 124: image_index = 13; break;
	case 126: image_index = 14; break;
	case 128: image_index = 15; break;
      }

if timer = 108
{
    dsmashfx = create_blur(x,y,self.id);
    dsmashfx.sprite_index = dsmash_fx;
    dsmashfx.image_index = 0;
    dsmashfx.image_speed = 0;
	dsmashfx.snap = self.id;
    dsmashfx.image_xscale = 0.4 * (1-facing*2) * size;
    dsmashfx.image_yscale = 0.4 * size;
    dsmashfx.x = x + place_x(75);
	dsmashfx.y = y + place_y(3);
    dsmashfx.depth = depth - 1;
}


switch (timer)
{

	case 109: dsmashfx.image_index = 1; break;
	case 110: dsmashfx.image_index = 2; break;
	case 111: dsmashfx.image_index = 3; break;
	case 112: dsmashfx.image_index = 4; break;
	case 113: dsmashfx.image_index = 5; break;
	case 114: dsmashfx.image_index = 6; break;
	case 115: dsmashfx.image_index = 7; break;
	case 116: dsmashfx.image_index = 8; break;
	case 117: dsmashfx.image_index = 9; break;
	case 118: dsmashfx.image_index = 10; break;
	case 119: dsmashfx.image_index = 11; break;
	case 120: dsmashfx.image_index = 12; break;
	case 121: dsmashfx.image_index = 13; break;
	case 123: dsmashfx.image_index = 14; break;
	case 124: dsmashfx.image_index = 15; break;
}

if timer = 108
{
	if (random(2) > 1)
	{
	sound_play(choose(attack_voice6,attack_voice7,attack_voice8));
	}
}

if timer = 110
{
    create_hitbox ( 11 , angle_correct(16) , 6.4 , 1.1 , 17 , 8 , arcueid_hit2 , obj_spark_hit3 , 1.25 , 0.73 , 34 , 10.40 , self.id , 4 , 2 );
    hitbox.image_angle = ( 1 - facing * 2 ) * 0;
}

if timer = 125
{
with (dsmashfx) {instance_destroy();}
}

}
  
if timer >= time-2 && state_type != "flinch" && state_type != "air_flinch" {
    x+= size * (2-facing*4);
	intangible=0;
	sprite_index = stand_sprite;
    attack_type = "none";
    state_type = "stand";
    timer = 0;
    time =-1;
    }