fast_fall = 0
fast_fall_temp = 0
if state_type = "jump" || state_type = "stand" || state_type = "run" || state_type = "crouch" {
        state_type = "air_attack"
        attack_type = "sideb"
        image_speed = 0
        sprite_index = sideb_sprite
        image_index=0
        timer = 0
        time = 39
		hspeed = 0;
		air_move = 0;
    }

slide = 0;

if ( timer < time )
  {
state_type = "air_attack"
	switch (timer)
	{
		case 3: image_index = 1; break;
		case 8: image_index = 2; sound_play(upb_sound); sound_play(sideb_voice); break;
		case 10: image_index = 3; break;
		case 12: image_index = 4; break;
		case 15: image_index = 5; break;
		case 18: image_index = 6; break;
		case 21: image_index = 7; break;
		case 24: image_index = 8; break;
		case 27: image_index = 9; break;
		case 33: image_index = 10; break;
	}


if air > 0
{
			vspeed = 0.5; 
			gravity_lock=1;
}

if timer = 8
{
hspeed = 6 * (1-facing*2) * size;
}

if timer = 10
{
    create_hitbox ( 8 , angle_correct(13) , 5.5 , 0  , 20 , 5 , arcueid_slash , obj_spark_slash2 , 1.40 , 0.97 , 28 , 13.60 , self.id , 8 , 3 );
    hitbox.image_angle = ( 1 - facing * 2 ) * 0;
}
	  
	 if timer = 08
{
    dairfx = create_blur(x,y,self.id);
    dairfx.sprite_index = dair_fx;
    dairfx.image_index = 0;
    dairfx.image_speed = 0;
	dairfx.snap = self.id;
    dairfx.image_xscale = 0.3 * (1-facing*2) * size;
    dairfx.image_yscale = 0.3 * size;
    dairfx.x = x + place_x(94);
	dairfx.y = y + place_y(92);
    dairfx.depth = depth - 1;
}  


if timer >= 15 and timer <= 22
{
if facing = 0 && hspeed > 0 {
		hspeed -= 0.5;
		}
	if facing = 1 && hspeed < 0 {
		hspeed += 0.5;
		}
}

switch (timer)
{

	case 09: dairfx.image_index = 1; break;
	case 10: dairfx.image_index = 2; break;
	case 11: dairfx.image_index = 3; break;
	case 12: dairfx.image_index = 4; break;
	case 13: dairfx.image_index = 5; break;
	case 14: dairfx.image_index = 6; break;
	case 15: dairfx.image_index = 7; break;
	case 16: dairfx.image_index = 8; break;
	case 17: dairfx.image_index = 9; break;
	case 18: dairfx.image_index = 10; break;
	case 18: dairfx.image_index = 11; break;
	case 19: dairfx.image_index = 12; break;
	case 20: dairfx.image_index = 13; break;
	case 21: dairfx.image_index = 14; break;
}

if timer = 22
{
with (dairfx) {instance_destroy();}
} 
	  
	  if timer >= 16 and timer <= 26 and special = 1
	  {
	  timer = 100;
	  time = 144;
	  sprite_index = sideb_sprite2;
	  image_index = 0;
      with (dairfx) {instance_destroy();}
	  hspeed = 0;
	  }
	  
	
	switch (timer)
	{
		case 110: image_index = 1; sound_play(upb_sound); sound_play(sideb_voice2); break;
		case 111: image_index = 2; break;
		case 112: image_index = 3; break;
		case 114: image_index = 4; break;
		case 116: image_index = 5; break;
		case 118: image_index = 6; break;
		case 120: image_index = 7; break;
		case 122: image_index = 8; break;
		case 124: image_index = 9; break;
		case 126: image_index = 10; break;
		case 128: image_index = 11; break;
		case 132: image_index = 12; break;
		case 136: image_index = 13; break;
		case 140: image_index = 14; break;
	}  

if timer = 109
{
    sidebfx2 = create_blur(x,y,self.id);
    sidebfx2.sprite_index = upb_fx;
    sidebfx2.image_index = 0;
    sidebfx2.image_speed = 0;
	sidebfx2.snap = self.id;
    sidebfx2.image_xscale = 0.4 * (1-facing*2) * size;
    sidebfx2.image_yscale = 0.4 * size;
    sidebfx2.x = x + place_x(80);
	sidebfx2.y = y + place_y(0);
    sidebfx2.depth = depth - 1;
}

if timer = 110
{
    create_hitbox ( 9 , angle_correct(18) , 5.1 , 6.3 , 38 , 7 , arcueid_hit3 , obj_spark_slash3 , 1.16 , 1.45 , 26 , 22 , self.id , 5 , 3 );
    hitbox.image_angle = ( 1 - facing * 2 ) * 0;
	
	hspeed = 6 * (1-facing*2) * size;
}

if timer >= 113 and timer <= 118
{
if facing = 0 && hspeed > 0 {
		hspeed -= 1;
		}
	if facing = 1 && hspeed < 0 {
		hspeed += 1;
		}
}

switch ( timer )
      {
	case 110: sidebfx2.image_index = 1; break;
	case 111: sidebfx2.image_index = 2; break;
	case 112: sidebfx2.image_index = 3; break;
	case 113: sidebfx2.image_index = 4; break;
	case 114: sidebfx2.image_index = 5; break;
	case 115: sidebfx2.image_index = 6; break;
	case 116: sidebfx2.image_index = 7; break;
	case 117: sidebfx2.image_index = 8; break;
	case 118: sidebfx2.image_index = 9; break;
	case 119: sidebfx2.image_index = 10; break;
	case 120: sidebfx2.image_index = 11; break;
	case 121: sidebfx2.image_index = 12; break;
	case 122: sidebfx2.image_index = 13; break;
	case 123: sidebfx2.image_index = 14; break;
	}

if timer = 124
{
with (sidebfx2) {instance_destroy();}
} 
	  
  }


if timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" {
    attack_type = "none";
    if air > 0
        state_type = "jump";
    else
        state_type = "stand";
    timer = 0;
    time =-1;
}