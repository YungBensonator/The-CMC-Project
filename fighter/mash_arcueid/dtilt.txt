if state_type = "crouch" || state_type = "stand" || state_type = "run" {
        hspeed = 0;
        state_type = "attack";
        attack_type = "dtilt";
        image_speed = 0;
        sprite_index = dtilt_sprite;
        image_index=0;
        timer = 0;
        time = 14;
        timer_speed=1;
		
		if dtiltcancel = 1
		{
	sprite_index = dtilt_sprite2;
	image_index = 0;
    timer = 40;
    time = 56;
	attacking = 0;
		}
		
		if dtiltcancel = 2
		{
	sprite_index = dtilt_sprite3;
	image_index = 0;
    timer = 80;
    time = 107;
	attacking = 0;
		}
		
}
if ( timer < time )
  {
  state_type = "attack";
    switch ( timer )
      {
	case 2: image_index = 1; break;
	case 3: image_index = 2; sound_play(swingsnd1); break;
	case 4: image_index = 3; break;
	case 6: image_index = 4; break;
	case 8: image_index = 5; break;
	case 11: image_index = 6; break;
      }
	  
	if timer = 02
{
    dtiltfx = create_blur(x,y,self.id);
    dtiltfx.sprite_index = dtilt_fx;
    dtiltfx.image_index = 0;
    dtiltfx.image_speed = 0;
	dtiltfx.snap = self.id;
    dtiltfx.image_xscale = 0.4 * (1-facing*2) * size;
    dtiltfx.image_yscale = 0.4 * size;
    dtiltfx.x = x + place_x(67);
	dtiltfx.y = y + place_y(5);
    dtiltfx.depth = depth - 1;
	
hspeed = 0;


	
	if (random(2) > 1)
	{
	sound_play(choose(attack_voice1,attack_voice2));
	}

}  

switch (timer)
{

	case 03: dtiltfx.image_index = 1; break;
	case 04: dtiltfx.image_index = 2; break;
	case 05: dtiltfx.image_index = 3; break;
	case 06: dtiltfx.image_index = 4; break;
	case 07: dtiltfx.image_index = 5; break;
	case 08: dtiltfx.image_index = 6; break;
	case 09: dtiltfx.image_index = 7; break;
	case 10: dtiltfx.image_index = 8; break;
}
  
if timer = 11
{
with (dtiltfx) {instance_destroy();}
}  

if timer = 4
{
    create_hitbox ( 2 , angle_correct(37) , 3.2 , 0 , 10 , 3 , arcueid_hit1 , obj_spark_hit1 , 1.03 , 0.62 , 15.60 , 12.80 , self.id , 2 , 2 );
    hitbox.image_angle = ( 1 - facing * 2 ) * 0;
	hitbox.di = 0;
}

if (timer >= 6 and timer < 14) and attacking and !movedown and !moveleft and !moveright and !moveup and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
	jabcancel = 1;
    char_jab();
with (dtiltfx) {instance_destroy();}
	}
	
	if (timer >= 6 and timer < 14) and attacking and ((facing and moveleft) or (!facing and moveright)) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_stilt();
with (dtiltfx) {instance_destroy();}
	}
	
	if (timer >= 6 and timer < 14) and attacking and moveup and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
	hspeed=3*(1-facing*2);
    char_utilt();
with (dtiltfx) {instance_destroy();}
	}
	
	if (timer >= 6 and timer < 14) and ((facing and smashleft) or (!facing and smashright)) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_ssmash();
with (dtiltfx) {instance_destroy();}
	}
	
	if (timer >= 6 and timer < 14) and smashdown and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_dsmash();
with (dtiltfx) {instance_destroy();}
	}
	
	if (timer >= 6 and timer < 14) and smashup and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_usmash();
with (dtiltfx) {instance_destroy();}
	}
	
	if (timer >= 6 and timer < 14) and (special and moveup) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_upb();
with (dtiltfx) {instance_destroy();}
	}
	
	if (timer >= 6 and timer < 14) and (special) and !moveleft and !moveright and !moveup and !movedown and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_b();
with (dtiltfx) {instance_destroy();}
	}
	
	if (timer >= 6 and timer < 14) and (special and ((facing and moveleft) or (!facing and moveright))) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_sideb();
with (dtiltfx) {instance_destroy();}
	}
	
	if (timer >= 6 and timer < 14) and (special and movedown) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_downb();
with (dtiltfx) {instance_destroy();}
	}

if timer >= 6 and timer <= 14 and attacking = 1
{
	sprite_index = dtilt_sprite2;
	image_index = 0;
    timer = 40;
    time = 56;
	attacking = 0;
with (dtiltfx) {instance_destroy();}
}

 switch ( timer )
      {
	case 41: image_index = 1; break;
	case 42: image_index = 2; break;
	case 43: image_index = 3; sound_play(swingsnd2); break;
	case 44: image_index = 4; break;
	case 45: image_index = 5; break;
	case 47: image_index = 6; break;
	case 49: image_index = 7; break;
	case 52: image_index = 8; break;
      }
	  
if timer = 43
{
    dtiltfx2 = create_blur(x,y,self.id);
    dtiltfx2.sprite_index = dtilt_fx2;
    dtiltfx2.image_index = 0;
    dtiltfx2.image_speed = 0;
	dtiltfx2.snap = self.id;
    dtiltfx2.image_xscale = 0.4 * (1-facing*2) * size;
    dtiltfx2.image_yscale = 0.4 * size;
    dtiltfx2.x = x + place_x(82);
	dtiltfx2.y = y + place_y(50);
    dtiltfx2.depth = depth - 1;
	
	
	if (random(2) > 1)
	{
	sound_play(choose(attack_voice,attack_voice2));
	}
	
hspeed = 0;
}  

switch (timer)
{

	case 44: dtiltfx2.image_index = 1; break;
	case 45: dtiltfx2.image_index = 2; break;
	case 46: dtiltfx2.image_index = 3; break;
	case 47: dtiltfx2.image_index = 4; break;
	case 48: dtiltfx2.image_index = 5; break;
	case 49: dtiltfx2.image_index = 6; break;
	case 50: dtiltfx2.image_index = 7; break;
	case 51: dtiltfx2.image_index = 8; break;
	case 52: dtiltfx2.image_index = 9; break;
	case 53: dtiltfx2.image_index = 10; break;
	case 54: dtiltfx2.image_index = 11; break;
	case 55: dtiltfx2.image_index = 12; break;
}	  

if timer = 45
{
    create_hitbox ( 2 , angle_correct(37) , 3.2 , 0 , 10 , 3 , arcueid_hit1 , obj_spark_hit1 , 1.03 , 0.62 , 15.60 , 12.80 , self.id , 2 , 2 );
    hitbox.image_angle = ( 1 - facing * 2 ) * 0;
	hitbox.di = 0;
}

if timer >= 47 and timer <= 55 and attacking = 1
{
	sprite_index = dtilt_sprite3;
	image_index = 0;
    timer = 80;
    time = 107;
	attacking = 0;
with (dtiltfx2) {instance_destroy();}
}

if (timer >= 47 and timer <= 55) and attacking and !movedown and !moveleft and !moveright and !moveup and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_jab();
with (dtiltfx2) {instance_destroy();}
	}
	
	if (timer >= 47 and timer <= 55) and attacking and ((facing and moveleft) or (!facing and moveright)) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
	stiltcancel = 0
    char_stilt();
with (dtiltfx2) {instance_destroy();}
	}
	
	if (timer >= 47 and timer <= 55) and attacking and moveup and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
	hspeed=3*(1-facing*2);
    char_utilt();
with (dtiltfx2) {instance_destroy();}
	}
	
	if (timer >= 47 and timer <= 55) and ((facing and smashleft) or (!facing and smashright)) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_ssmash();
with (dtiltfx2) {instance_destroy();}
	}
	
	if (timer >= 47 and timer <= 55) and smashdown and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_dsmash();
with (dtiltfx2) {instance_destroy();}
	}
	
	if (timer >= 47 and timer <= 55) and smashup and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_usmash();
with (dtiltfx2) {instance_destroy();}
	}
	
	if (timer >= 47 and timer <= 55) and (special and moveup) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_upb();
with (dtiltfx2) {instance_destroy();}
	}
	
	if (timer >= 47 and timer <= 55) and (special) and !moveleft and !moveright and !moveup and !movedown and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_b();
with (dtiltfx2) {instance_destroy();}
	}
	
	if (timer >= 47 and timer <= 55) and (special and ((facing and moveleft) or (!facing and moveright))) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_sideb();
with (dtiltfx2) {instance_destroy();}
	}
	
	if (timer >= 47 and timer <= 55) and (special and movedown) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_downb();
with (dtiltfx2) {instance_destroy();}
	}

	switch ( timer )
      {
	case 81: image_index = 1; break;
	case 82: image_index = 2; break;
	case 83: image_index = 3; break;
	case 84: image_index = 4; sound_play(attacksnd2); break;
	case 85: image_index = 5; break;
	case 86: image_index = 6; break;
	case 89: image_index = 7; break;
	case 92: image_index = 8; break;
	case 95: image_index = 9; break;
	case 98: image_index = 10; break;
	case 101: image_index = 11; break;
	case 104: image_index = 12; break;
      }

if timer = 81
{
hspeed = 4 * (1-facing*2) * size;
}

if timer = 85
{
	if (random(2) > 1)
	{
	sound_play(choose(attack_voice3,attack_voice4,attack_voice5));
	}
	
    create_hitbox ( 4 , angle_correct(25) , 3.5 , 4.1 , 15 , 5 , arcueid_hit2 , obj_spark_hit3 , 0.99 , 0.54 , 18 , 5.60 , self.id , 3 , 2 );
    hitbox.image_angle = ( 1 - facing * 2 ) * 0;
	hspeed = 0;
	duster = instance_create(x,y,obj_dust_effect);
    duster.image_xscale *= 0.4*size;
    duster.image_yscale *= 0.3*size;
    duster.facing = facing;
}	  
	
	if (timer >= 85 and timer <= 93) and attacking and ((facing and moveleft) or (!facing and moveright)) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
	stiltcancel = 0
    char_stilt();
with (dtiltfx2) {instance_destroy();}
	}
	
	if (timer >= 85 and timer <= 93) and attacking and moveup and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
	hspeed=3*(1-facing*2);
    char_utilt();
with (dtiltfx2) {instance_destroy();}
	}
	
	if (timer >= 85 and timer <= 93) and ((facing and smashleft) or (!facing and smashright)) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_ssmash();
with (dtiltfx2) {instance_destroy();}
	}
	
	if (timer >= 85 and timer <= 93) and smashdown and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_dsmash();
with (dtiltfx2) {instance_destroy();}
	}
	
	if (timer >= 85 and timer <= 93) and smashup and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_usmash();
with (dtiltfx2) {instance_destroy();}
	}
	
	if (timer >= 85 and timer <= 93) and (special and moveup) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_upb();
with (dtiltfx2) {instance_destroy();}
	}
	
	if (timer >= 85 and timer <= 93) and (special) and !moveleft and !moveright and !moveup and !movedown and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_b();
with (dtiltfx2) {instance_destroy();}
	}
	
	if (timer >= 85 and timer <= 93) and (special and ((facing and moveleft) or (!facing and moveright))) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_sideb();
with (dtiltfx2) {instance_destroy();}
	}
	
	if (timer >= 85 and timer <= 93) and (special and movedown) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_downb();
with (dtiltfx2) {instance_destroy();}
	}

	  
  }

if ( timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" )
  {
    jabcancel = 0;
    dtiltcancel = 0;
    if movedown 
	{
	state_type = "crouch"; 
	sprite_index = crouch_sprite;
    crouchgetuptimer = min(9,timer)
    image_index = 7;
    timer = 14;
	}
	else {state_type = "stand";
    timer = 0;}
    attack_type = "none";
    time = -1;
  }
        

