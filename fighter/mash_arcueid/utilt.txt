if state_type = "run" || state_type = "stand" {
        hspeed = 0;
        state_type = "attack";
        attack_type = "utilt";
        image_speed = 0;
        sprite_index = utilt_sprite;
        image_index=0;
        timer = 0;
        time = 29;
        timer_speed=1;
        attacking = 0
}
if ( timer < time )
  {
  state_type = "attack";
    switch ( timer )
      {
	case 1: image_index = 1; break;
	case 2: image_index = 2; break;
	case 3: image_index = 3; break;
	case 4: image_index = 4; break;
	case 5: image_index = 5; sound_play(swingsnd2); break;
	case 6: image_index = 6; break;
	case 7: image_index = 7; break;
	case 8: image_index = 8; break;
	case 9: image_index = 9; break;
	case 10: image_index = 10; break;
	case 15: image_index = 11; break;
	case 17: image_index = 12; break;
	case 19: image_index = 13; break;
	case 21: image_index = 14; break;
	case 23: image_index = 15; break;
	case 25: image_index = 16; break;
	case 27: image_index = 17; break;
      }

if timer < 5
{
hspeed = 1.25 * (1 - facing*2) * size;
}

if timer = 5
{

	if (random(2) > 1)
	{
	sound_play(choose(utilt_voice,utilt_voice2));
	}
	
hspeed = 0;
}
	  
	if timer = 02
{
    utiltfx = create_blur(x,y,self.id);
    utiltfx.sprite_index = utilt_fx;
    utiltfx.image_index = 0;
    utiltfx.image_speed = 0;
	utiltfx.snap = self.id;
    utiltfx.image_xscale = 0.3 * (1-facing*2) * size;
    utiltfx.image_yscale = 0.3 * size;
    utiltfx.x = x + place_x(75);
	utiltfx.y = y + place_y(50);
    utiltfx.depth = depth - 1;
	
hspeed = 0;
}  

switch (timer)
{

	case 03: utiltfx.image_index = 1; break;
	case 04: utiltfx.image_index = 2; break;
	case 05: utiltfx.image_index = 3; break;
	case 06: utiltfx.image_index = 4; break;
	case 07: utiltfx.image_index = 5; break;
	case 08: utiltfx.image_index = 6; break;
	case 09: utiltfx.image_index = 7; break;
	case 10: utiltfx.image_index = 8; break;
	case 11: utiltfx.image_index = 9; break;
	case 12: utiltfx.image_index = 10; break;
	case 13: utiltfx.image_index = 11; break;
	case 14: utiltfx.image_index = 12; break;
	case 15: utiltfx.image_index = 13; break;
	case 16: utiltfx.image_index = 14; break;
}

if timer = 17
{
with (utiltfx) {instance_destroy();}
}  

if timer = 5
{
    create_hitbox ( 5 , angle_correct(75) , 4 , 4.5 , 12 , 6 , arcueid_hit2 , obj_spark_hit3 , 1.6 , 1.5 , 22.40 , 26.40 , self.id , 5 , 3 );
    hitbox.image_angle = ( 1 - facing * 2 ) * 0;
	hitbox.di = .2
	hitbox.sdi = .2
}

if (timer >= 5 and timer < 17) and ((attacking and moveup) or smashup) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_usmash();
with (utiltfx) {instance_destroy();}
	}
	
if (timer >= 6 and timer < 14) and (special and moveup) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
    char_upb();
with (utiltfx) {instance_destroy();}
	}	

if attack_success and movejump
	{
	
	sound_play(jump_sound);
	
	vspeed = -5.7;
	
	duster = instance_create(x+7*(1-facing*2),y,obj_dust_effect);
		duster.image_xscale *= .5
		duster.image_yscale *= .5;
		duster.facing = !facing
		
		duster = instance_create(x-7*(1-facing*2),y,obj_dust_effect);
		duster.image_xscale *= .5
		duster.image_yscale *= .5;
		duster.facing = facing
		
	state_type = "jump";
    attack_type = "none";
    timer = 0;
    time = -1;
	}
    
  }

if ( timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" )
  {
    jabcancel = 0;
    dtiltcancel = 0;
    state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
  }


