if enemy.x>x && enemy_dist < 33000 && !(enemy.x<x) && air = 0 && attack_type = "none" && (state_type = "stand" || state_type = "crouch" || sprite_index = walk_sprite)
{
	facing = 0;
	if (moveleft)
	{image_speed = -image_speed}
}

if enemy.x<x && enemy_dist < 33000 && !(enemy.x>x) && air = 0 && attack_type = "none" && (sprite_index = stand_sprite || state_type = "crouch" || sprite_index = walk_sprite)
{
	facing = 1;
	if (moveright)
	{image_speed = -image_speed}
}

if(state_type != "air_attack" && state_type != "attack")
{
        if (instance_exists(bfire)){
        with (bfire){
            instance_destroy();
        }
        }
}

has_abs = 1

///////////////////////////////////Crouch thing for crouching and getting up from crouch visually
if ( state_type = "crouch" ){
    
    sprite_index = crouch_sprite;
    image_speed = 0;
    switch (timer){
        case 0: image_index = 0; break;
        case 5: image_index = 1; break;
        case 10: image_index = 2; break;
        case 15: image_index = 3; break;
        case 20: image_index = 4; break;
		case 25: image_index = 5; break;
        case 30: image_index = 6; break;
        case 35: image_index = 7; break;
        case 40: image_index = 8; break;
        case 45: image_index = 9; break;
		case 50: image_index = 10; break;
        case 55: image_index = 11; break;
        case 60: image_index = 12; break;
        case 65: image_index = 13; break;
		//put as many cases as frames your crouch animation has
    }
	
	if sprite_index = crouch_sprite and timer = 65 {
		timer = 10
	}
}


///////////////////////////////////////End of Crouch thing for crouching and getting up from crouch visually
							
if ( state_type = "jump" && sprite_index == jump_sprite )
{
  if ( timer = 0 )
    image_index = 0; //start out the jump from the jump sprite's very first frame instead of any later ones
  if ( vspeed < 0 && image_index >= 0 )
    image_index = 0; //stay in that first frame as long as you're going up (you can change the image index in the condition to a later one to loop back)
  if ( vspeed >= 0 && image_index < 1 )
    image_index = 1; //the moment you start falling, continue the animation
  if ( image_index >= 8 )
    image_index = 7; //remove the comment thing if you want to loop the jump animation back to a previous frame when falling*/
}

if sprite_index != sideb_sprite {
	with(hellsfang) {instance_destroy()}
}

if sprite_index != dair_sprite {
	with (elmeteoro) {instance_destroy()}
}

if (!instance_exists(OverdriveHud)){
    hud_x = obj_game_control.hud_x[44];
    hud_y = window_h-77+lengthdir_y(obj_game_control.hudp_shake[i]*0.1,obj_game_control.hudp_shake[i]*10);    
    OverdriveHud = instance_create ( hud_x+40, hud_y, obj_custom_gfx);
    OverdriveHud.step_script = hudThing_step_script;
    OverdriveHud.draw_script = hudThing_draw_script;
    OverdriveHud.owner = self.id;
    OverdriveHud.keepmain = self.keepmain;
	OverdriveHud.image_xscale = 1.2
	OverdriveHud.image_yscale = 1.2
	OverdriveHud.sprite_index = overdrive_ui;
    OverdriveHud.image_speed = 0;
	OverdriveHud.image_alpha = 1;
}

if odactivate = 0 or odtimer > 0 {
	OverdriveHud.image_angle += 1
	OverdriveHud.image_blend = c_white
}

if odactivate = 1 and odtimer = 0 {
	OverdriveHud.image_blend = c_dkgray
}


if (enemy.state_type = "out"){
temp_spawn += 1
 }
if odtimer > 0 {
	odtimer -= 1.5
	od = 1
}

if odtimer <= 0 {
	odtimer = 0
	od = 0
}

if odtimer = 1 {
	sound_play(overdriveend_sound);
}

if od = 1 {
	 aaa = after_image ( 3 , c_black , 0.25 );
 aaa.image_xscale *= 1.15;
 aaa.image_yscale *= 1.15;
 aaa.x += -1 + floor ( random ( 3 ) );
 aaa.y += -1 + floor ( random ( 3 ) );
}

if state_type = "out" {
	odactivate = 0
	odtimer = 0
}

if cheesetimer > 0 {
	cheesetimer -= 1
}

if air = 0 {
downbtemp = 0
sidebtemp = 0
}
