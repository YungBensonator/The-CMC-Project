if state_type = "jump" {
        vspeed -= 0.1;
        state_type = "air_attack";
        attack_type = "dair";
        image_speed = 0;
        sprite_index = dair_sprite;
        image_index = 0;
        timer = 0;
        time = 49;
        timer_speed=1;
        meteor_cancel = 0;
}
        if timer < time {
		switch ( timer )
		{
		case 2: image_index = 1; break;
		case 3: image_index = 2; break;
		case 4: image_index = 3; break;
		case 8: 
			image_index = 4; 
			
			// Spin effect 1
			xx = (37-sprite_get_xoffset(sprite_index))*size*(1-facing*2)*0.7;
			yy = (53-sprite_get_yoffset(sprite_index))*-size*0.7;
			foot_spin = create_blur(xx+x,y-yy,self.id);
			foot_spin.sprite_index = spr_spin_blur;
			foot_spin.image_xscale = 0.19 * size * (1-facing*2)*0.7;
			foot_spin.image_yscale = 0.17 * size *0.7;
			foot_spin.snap = self.id;
			//foot_spin.image_alpha = 0.7;
			foot_spin.alarm[0] = 40;
			foot_spin.image_index = 0;
			foot_spin.anim_speed = 1;
			foot_spin.image_angle = 20 + 140*facing;
			foot_spin.loop = 1;
			
			// Spin effect 2
			xx = (25-sprite_get_xoffset(sprite_index))*size*(1-facing*2)*0.7;
			yy = (40-sprite_get_yoffset(sprite_index))*-size*0.7;
			waste_spin = create_blur(xx+x,y-yy,self.id);
			waste_spin.sprite_index = spr_spin_blur;
			waste_spin.image_xscale = 0.25 * size * (1-facing*2) *0.7;
			waste_spin.image_yscale = 0.23 * size *0.7;
			waste_spin.snap = self.id;
			waste_spin.alarm[0] = 40;
			waste_spin.image_index = 0;
			waste_spin.anim_speed = 1;
			//waste_spin.image_angle = 20 + 140*facing;
			waste_spin.image_angle = angle_correct(20);
			waste_spin.loop = 1;
			
			// Star effect
			xx = (40-sprite_get_xoffset(sprite_index))*0.7;
			yy = (60-sprite_get_yoffset(sprite_index))*0.7;
			spark_eff = create_spark(/*x-offset*/xx,/*y-offset*/yy,/*sprite*/global.spark_sprite,/*speed*/1,/*xscale*/0.25*0.7*size,/*yscale*/0.25*0.7*size);
			spark_eff.snap = self.id;
			
			break;
		case 10: 
			image_index = 5; break;
		case 12: image_index = 6; break;
		case 14: image_index = 7; break;
		case 16: image_index = 8; break;
		case 18: image_index = 9; break;
		case 20: image_index = 10; break;
		case 21: image_index = 11; break;
		case 22: image_index = 12; break;
		case 24: image_index = 13; break;
		case 26: image_index = 14; break;
		case 29: image_index = 15; break;
		case 32: image_index = 16; break;
		case 35: image_index = 17; break;
		case 38: image_index = 18; break;
		case 41: image_index = 19; break;
		case 44: image_index = 20; break;
		}
                if ( timer = 8 )
				{
				play_attack_voice();
                sound_play(attack_sound1);
				create_hitbox( 10 , 282-facing*24 , 3.25 , 4.15 , 12 , 9 , kick3 , obj_spark_hit1 , 0.66 , 0.91 , 4.90 , 11.90 , self.id , 16 ,3);
				hitbox.image_angle = ( 1 - facing * 2 ) * 26.15;
				hitbox.hit_stun = 12;
				hitbox.di = 1.15
				hitbox.shield_stun = 0.75
                }
                if ( timer = 10 )
				{
				hitbox.sfx=kick2
				hitbox.dir = 30+facing*120
				hitbox.damage = size*7;
				hitbox.shield_damage = 12;
				hitbox.hitlag_frames=3*size
				hitbox.bkb = 4.6;
				hitbox.kbg = 3.9;
				hitbox.hit_stun = 2;
                }
            if timer = 20 || timer = 23
                sound_play(attack_sound4)
            if timer = 14 || timer = 18
                sound_play(attack_sound2); 
			
            if air = 0
			{
            state_type="land";
            attack_type="none";
            sprite_index = land_sprite;
            timer=0;
            time=16; 
            }
        }  
 if (timer <= 10){
if (attack_success || target.object_index == obj_enemy) && (obj_score_control.stocks[target.number-1] == 1 && dontrepeat = 0 && target.offstage){
				if ((target.weight <= .22 && target.percent > 40) || (target.weight > .22 && target.weight < .3 && target.percent > 50) || (target.weight > .3 && target.percent > 60)){
				                killspark = instance_create(target.x-200,target.y-170,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.65;
				killspark.image_yscale = size * 0.85;
	            killspark.image_xscale = size * 0.45;
				killspark.image_yscale = size * 0.65;
                killspark.image_xscale = size * 0.65;

				killspark.image_index = 0;
				killspark.image_speed = 0.045;
				killspark.alarm[0] = 80;
				killspark.depth = depth + 1;
				sound_play(killscreen_voice);
				screen_shake(30,30);
				freezer  = instance_create(target.x,target.y,obj_freeze)
				freezer2  = instance_create(x,y,obj_freeze)
				effect_create_above(ef_ellipse,target.x,target.y+10,1,c_black)
				freezer.alarm[0] = 78
				freezer2.alarm[0] = 80
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = target.x - 50;
				spark.camera_r = target.x + 50;
				spark.camera_u = target.y - 80;
				spark.camera_d = target.y;
				spark.camera_boundary_zoom = 20;
				spark.alarm[0] = 60;
				spark2 = instance_create(target.x+8*(1-facing*2),target.y-26,obj_spark_hit3)
				spark2.alarm[0] = 50
				dontrepeat = 1;
				}
				}
        
  }

if timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" {
    dontrepeat = 0
	attack_type = "none";
    if air > 0
	{
    state_type = "jump";
	sprite_index = jump_sprite;
	image_index = 12;
	}
    else
	{
    state_type = "stand";
	}
	timer = 0;
	time = -1;
}
        
